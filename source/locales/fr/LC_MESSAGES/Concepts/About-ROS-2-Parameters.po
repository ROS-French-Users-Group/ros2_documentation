# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-07 08:44+0100\n"
"PO-Revision-Date: 2023-01-07 14:07:36.865489\n"
"Last-Translator: potranslator 1.1.5\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Translated-By: potranslator 1.1.5\n"

#: ../../source/Concepts/About-ROS-2-Parameters.rst:8
msgid "About parameters in ROS 2"
msgstr "À propos des paramètres dans ROS 2"

#: ../../source/Concepts/About-ROS-2-Parameters.rst:11
msgid "Table of Contents"
msgstr "Table des matières"

#: ../../source/Concepts/About-ROS-2-Parameters.rst:14
msgid "Overview"
msgstr "Aperçu"

#: ../../source/Concepts/About-ROS-2-Parameters.rst:16
msgid ""
"Parameters in ROS are associated with individual nodes. Parameters are used "
"to configure nodes at startup (and during runtime), without changing the "
"code. The lifetime of a parameter is tied to the lifetime of the node "
"(though the node could implement some sort of persistence to reload values "
"after restart)."
msgstr ""
"Les paramètres dans ROS sont associés à des nœuds individuels. Les "
"paramètres sont utilisés pour configurer les nœuds au démarrage (et pendant "
"l'exécution), sans changer le code. La durée de vie d'un paramètre est liée "
"à la durée de vie du nœud (bien que le nœud puisse implémenter une sorte de "
"persistance pour recharger les valeurs après le redémarrage)."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:20
msgid ""
"Parameters are addressed by node name, node namespace, parameter name, and "
"parameter namespace. Providing a parameter namespace is optional."
msgstr ""
"Les paramètres sont adressés par nom de nœud, espace de noms de nœud, nom de"
" paramètre et espace de noms de paramètre. La fourniture d'un espace de noms"
" de paramètre est facultative."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:23
msgid ""
"Each parameter consists of a key, a value, and a descriptor. The key is a "
"string and the value is one of the following types: bool, int64, float64, "
"string, byte[], bool[], int64[], float64[] or string[]. By default all "
"descriptors are empty, but can contain parameter descriptions, value ranges,"
" type information, and additional constraints."
msgstr ""
"Chaque paramètre se compose d'une clé, d'une valeur et d'un descripteur. La "
"clé est une chaîne et la valeur est l'un des types suivants : bool, int64, "
"float64, string, byte[], bool[], int64[], float64[] ou string[]. Par défaut,"
" tous les descripteurs sont vides, mais peuvent contenir des descriptions de"
" paramètres, des plages de valeurs, des informations de type et des "
"contraintes supplémentaires."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:27
msgid ""
"For an hands-on tutorial with ROS parameters see "
":doc:`../Tutorials/Beginner-CLI-Tools/Understanding-"
"ROS2-Parameters/Understanding-ROS2-Parameters`."
msgstr ""
"Pour un tutoriel pratique avec les paramètres ROS, voir "
":doc:`../Tutorials/Beginner-CLI-Tools/Understanding-"
"ROS2-Parameters/Understanding-ROS2-Parameters`."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:30
msgid "Parameters background"
msgstr "Contexte des paramètres"

#: ../../source/Concepts/About-ROS-2-Parameters.rst:33
msgid "Declaring parameters"
msgstr "Déclaration des paramètres"

#: ../../source/Concepts/About-ROS-2-Parameters.rst:35
msgid ""
"By default, a node needs to *declare* all of the parameters that it will "
"accept during its lifetime. This is so that the type and the name of the "
"parameter are well-defined at node startup time, which reduces the chances "
"of misconfiguration later on. See :doc:`../Tutorials/Beginner-Client-"
"Libraries/Using-Parameters-In-A-Class-CPP` or :doc:`../Tutorials/Beginner-"
"Client-Libraries/Using-Parameters-In-A-Class-Python` for tutorials on "
"declaring and using parameters from a node."
msgstr ""
"Par défaut, un nœud doit *déclarer* tous les paramètres qu'il acceptera "
"pendant sa durée de vie. Ainsi, le type et le nom du paramètre sont bien "
"définis au démarrage du nœud, ce qui réduit les risques de mauvaise "
"configuration par la suite. Voir :doc:`../Tutorials/Beginner-Client-"
"Libraries/Using-Parameters-In-A-Class-CPP` ou :doc:`../Tutorials/Beginner-"
"Client-Libraries/Using-Parameters-In- A-Class-Python` pour des tutoriels sur"
" la déclaration et l'utilisation des paramètres d'un nœud."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:39
msgid ""
"For some types of nodes, not all of the parameters will be known ahead of "
"time. In these cases, the node can be instantiated with "
"``allow_undeclared_parameters`` set to ``true``, which will allow parameters"
" to be get and set on the node even if they haven't been declared."
msgstr ""
"Pour certains types de nœuds, tous les paramètres ne seront pas connus à "
"l'avance. Dans ces cas, le nœud peut être instancié avec "
"``allow_undeclared_parameters`` défini sur ``true``, ce qui permettra "
"d'obtenir et de définir des paramètres sur le nœud même s'ils n'ont pas été "
"déclarés."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:43
msgid "Parameter types"
msgstr "Types de paramètres"

#: ../../source/Concepts/About-ROS-2-Parameters.rst:45
msgid ""
"Each parameter on a ROS 2 node has one of the pre-defined parameter types as"
" mentioned in the Overview. By default, attempts to change the type of a "
"declared parameter at runtime will fail. This prevents common mistakes, such"
" as putting a boolean value into an integer parameter."
msgstr ""
"Chaque paramètre d'un nœud ROS 2 possède l'un des types de paramètres "
"prédéfinis, comme mentionné dans la Présentation. Par défaut, les tentatives"
" de modification du type d'un paramètre déclaré lors de l'exécution "
"échoueront. Cela évite les erreurs courantes, telles que l'insertion d'une "
"valeur booléenne dans un paramètre entier."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:49
msgid ""
"If a parameter needs to be multiple different types, and the code using the "
"parameter can handle it, this default behavior can be changed. When the "
"parameter is declared, it should be declared using a ``ParameterDescriptor``"
" with the ``dynamic_typing`` member variable set to ``true``."
msgstr ""
"Si un paramètre doit être de plusieurs types différents et que le code "
"utilisant le paramètre peut le gérer, ce comportement par défaut peut être "
"modifié. Lorsque le paramètre est déclaré, il doit être déclaré en utilisant"
" un ``ParameterDescriptor`` avec la variable membre ``dynamic_typing`` "
"définie sur ``true``."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:53
msgid "Parameter callbacks"
msgstr "Rappels de paramètres"

#: ../../source/Concepts/About-ROS-2-Parameters.rst:55
msgid ""
"A ROS 2 node can register two different types of callbacks to be informed "
"when changes are happening to parameters. The reason that there are two "
"types of callbacks is to have a chance to intervene before the parameter "
"change happens, and to have a chance to react after the parameter change "
"happens. A node can register for both, either, or none of the callback "
"types. Both types are described below."
msgstr ""
"Un nœud ROS 2 peut enregistrer deux types de rappels différents pour être "
"informé lorsque des modifications sont apportées aux paramètres. La raison "
"pour laquelle il existe deux types de rappels est d'avoir une chance "
"d'intervenir avant que le changement de paramètre ne se produise et d'avoir "
"une chance de réagir après que le changement de paramètre se soit produit. "
"Un nœud peut s'enregistrer pour les deux, l'un ou l'autre des types de "
"rappel. Les deux types sont décrits ci-dessous."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:60
msgid ""
"The first type is known as a \"set parameter\" callback, and can be "
"installed by calling ``add_on_set_parameters_callback``. The callback should"
" accept a list of ``Parameter`` objects, and return an "
"``rcl_interfaces/msg/SetParametersResult``. This callback will be called "
"before a parameter is declared or changed on a node. The main purpose of "
"this callback is to give the user the ability to inspect the upcoming change"
" to the parameter and explicitly reject the change."
msgstr ""
"Le premier type est connu sous le nom de callback \"set parameters\" et peut"
" être installé en appelant ``add_on_set_parameters_callback``. Le rappel "
"doit accepter une liste d'objets ``Parameter`` et renvoyer un "
"``rcl_interfaces/msg/SetParametersResult``. Ce rappel sera appelé avant "
"qu'un paramètre ne soit déclaré ou modifié sur un nœud. L'objectif principal"
" de ce rappel est de donner à l'utilisateur la possibilité d'inspecter la "
"modification à venir du paramètre et de rejeter explicitement la "
"modification."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:66
msgid ""
"It is important that \"set parameter\" callbacks have no side-effects. Since"
" multiple \"set parameter\" callbacks can be chained, there is no way for an"
" individual callback to know if a later callback will reject the update. If "
"the individual callback were to make changes to the class it is in, for "
"instance, it may get out-of-sync with the actual parameter. To get a "
"callback *after* a parameter has been successfully changed, see the next "
"type of callback below."
msgstr ""
"Il est important que les rappels \"set parameters\" n'aient pas d'effets "
"secondaires. Étant donné que plusieurs rappels \"set parameters\" peuvent "
"être chaînés, il n'y a aucun moyen pour un rappel individuel de savoir si un"
" rappel ultérieur rejettera la mise à jour. Si le rappel individuel devait "
"apporter des modifications à la classe dans laquelle il se trouve, par "
"exemple, il peut se désynchroniser avec le paramètre réel. Pour obtenir un "
"rappel * après * qu'un paramètre a été modifié avec succès, voir le type de "
"rappel suivant ci-dessous."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:71
msgid ""
"The second type of callback is known as an \"on parameter event\" callback, "
"and can be installed by calling ``on_parameter_event``. The callback should "
"accept an ``rcl_interfaces/msg/ParameterEvent`` object, and return nothing. "
"This callback will be called after all parameters have been declared, "
"changed, or deleted. The main purpose of this callback is to give the user "
"the ability to react to changes from parameters that have successfully been "
"accepted."
msgstr ""
"Le deuxième type de rappel est connu sous le nom de rappel \"événement sur "
"paramètre\" et peut être installé en appelant ``on_parameter_event``. Le "
"rappel doit accepter un objet ``rcl_interfaces/msg/ParameterEvent`` et ne "
"rien renvoyer. Ce rappel sera appelé après que tous les paramètres auront "
"été déclarés, modifiés ou supprimés. L'objectif principal de ce rappel est "
"de donner à l'utilisateur la possibilité de réagir aux modifications des "
"paramètres qui ont été acceptés avec succès."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:77
msgid "Interacting with parameters"
msgstr "Interagir avec les paramètres"

#: ../../source/Concepts/About-ROS-2-Parameters.rst:79
msgid ""
"ROS 2 nodes can perform parameter operations through node APIs as described "
"in :doc:`../Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-"
"CPP` or :doc:`../Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-"
"Class-Python`. External processes can perform parameter operations via "
"parameter services that are created by default when a node is instantiated. "
"The services that are created by default are:"
msgstr ""
"Les nœuds ROS 2 peuvent effectuer des opérations sur les paramètres via les "
"API de nœud comme décrit dans :doc:`../Tutorials/Beginner-Client-"
"Libraries/Using-Parameters-In-A-Class-CPP` ou :doc:`../Tutorials/ Beginner-"
"Client-Libraries/Using-Parameters-In-A-Class-Python`. Les processus externes"
" peuvent effectuer des opérations sur les paramètres via des services de "
"paramètres qui sont créés par défaut lorsqu'un nœud est instancié. Les "
"services créés par défaut sont :"

#: ../../source/Concepts/About-ROS-2-Parameters.rst:83
msgid ""
"/node_name/describe_parameters: Uses a service type of "
"``rcl_interfaces/srv/DescribeParameters``. Given a list of parameter names, "
"returns a list of descriptors associated with the parameters."
msgstr ""
"/node_name/describe_parameters : utilise un type de service de "
"``rcl_interfaces/srv/DescribeParameters``. À partir d'une liste de noms de "
"paramètres, renvoie une liste de descripteurs associés aux paramètres."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:85
msgid ""
"/node_name/get_parameter_types: Uses a service type of "
"``rcl_interfaces/srv/GetParameterTypes``. Given a list of parameter names, "
"returns a list of parameter types associated with the parameters."
msgstr ""
"/node_name/get_parameter_types : utilise un type de service de "
"``rcl_interfaces/srv/GetParameterTypes``. À partir d'une liste de noms de "
"paramètres, renvoie une liste de types de paramètres associés aux "
"paramètres."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:87
msgid ""
"/node_name/get_parameters: Uses a service type of "
"``rcl_interfaces/srv/GetParameters``. Given a list of parameter names, "
"returns a list of parameter values associated with the parameters."
msgstr ""
"/node_name/get_parameters : utilise un type de service de "
"``rcl_interfaces/srv/GetParameters``. À partir d'une liste de noms de "
"paramètres, renvoie une liste de valeurs de paramètres associées aux "
"paramètres."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:89
msgid ""
"/node_name/list_parameters: Uses a service type of "
"``rcl_interfaces/srv/ListParameters``. Given an optional list of parameter "
"prefixes, returns a list of the available parameters with that prefix.  If "
"the prefixes are empty, returns all parameters."
msgstr ""
"/node_name/list_parameters : utilise un type de service de "
"``rcl_interfaces/srv/ListParameters``. Étant donné une liste facultative de "
"préfixes de paramètres, renvoie une liste des paramètres disponibles avec ce"
" préfixe. Si les préfixes sont vides, renvoie tous les paramètres."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:91
msgid ""
"/node_name/set_parameters: Uses a service type of "
"``rcl_interfaces/srv/SetParameters``. Given a list of parameter names and "
"values, attempts to set the parameters on the node.  Returns a list of "
"results from trying to set each parameter; some of them may have succeeded "
"and some may have failed."
msgstr ""
"/node_name/set_parameters : utilise un type de service de "
"``rcl_interfaces/srv/SetParameters``. À partir d'une liste de noms et de "
"valeurs de paramètres, tente de définir les paramètres sur le nœud. Renvoie "
"une liste des résultats de la tentative de définition de chaque paramètre ; "
"certains d'entre eux ont peut-être réussi et d'autres ont échoué."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:93
msgid ""
"/node_name/set_parameters_atomically: Uses a service type of "
"``rcl_interfaces/srv/SetParametersAtomically``. Given a list of parameter "
"names and values, attempts to set the parameters on the node.  Returns a "
"single result from trying to set all parameters, so if one failed, all of "
"them failed."
msgstr ""
"/node_name/set_parameters_atomically : utilise un type de service de "
"``rcl_interfaces/srv/SetParametersAtomically``. À partir d'une liste de noms"
" et de valeurs de paramètres, tente de définir les paramètres sur le nœud. "
"Renvoie un seul résultat en essayant de définir tous les paramètres, donc si"
" l'un échoue, tous échouent."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:97
msgid "Setting initial parameter values when running a node"
msgstr ""
"Définition des valeurs initiales des paramètres lors de l'exécution d'un "
"nœud"

#: ../../source/Concepts/About-ROS-2-Parameters.rst:99
msgid ""
"Initial parameter values can be set when running the node either through "
"individual command-line arguments, or through YAML files. See "
":ref:`NodeArgsParameters` for examples on how to set initial parameter "
"values."
msgstr ""
"Les valeurs initiales des paramètres peuvent être définies lors de "
"l'exécution du nœud via des arguments de ligne de commande individuels ou "
"via des fichiers YAML. Voir :ref:`NodeArgsParameters` pour des exemples sur "
"la façon de définir les valeurs initiales des paramètres."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:103
msgid "Setting initial parameter values when launching nodes"
msgstr ""
"Définition des valeurs initiales des paramètres lors du lancement des nœuds"

#: ../../source/Concepts/About-ROS-2-Parameters.rst:105
msgid ""
"Initial parameter values can also be set when running the node through the "
"ROS 2 launch facility. See :doc:`this document "
"<../Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects>` for"
" information on how to specify parameters via launch."
msgstr ""
"Les valeurs initiales des paramètres peuvent également être définies lors de"
" l'exécution du nœud via la fonction de lancement ROS 2. Voir :doc:`ce "
"document <../Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-"
"Projects>` pour plus d'informations sur la façon de spécifier les paramètres"
" via le lancement."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:109
msgid "Manipulating parameter values at runtime"
msgstr "Manipulation des valeurs de paramètres lors de l'exécution"

#: ../../source/Concepts/About-ROS-2-Parameters.rst:111
msgid ""
"The ``ros2 param`` command is the general way to interact with parameters "
"for nodes that are already running. ``ros2 param`` uses the parameter "
"service API as described above to perform the various operations. See "
":doc:`the how-to guide <../How-To-Guides/Using-ros2-param>` for details on "
"how to use ``ros2 param``."
msgstr ""
"La commande ``ros2 param`` est le moyen général d'interagir avec les "
"paramètres des nœuds déjà en cours d'exécution. ``ros2 param`` utilise l'API"
" de service de paramètres comme décrit ci-dessus pour effectuer les "
"différentes opérations. Voir :doc:`the how-to guide <../How-To-Guides/Using-"
"ros2-param>` pour plus de détails sur l'utilisation de ``ros2 param``."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:116
msgid "Migrating from ROS 1"
msgstr "Migration depuis ROS 1"

#: ../../source/Concepts/About-ROS-2-Parameters.rst:118
msgid ""
"The :doc:`Launch file migration guide <../How-To-Guides/Launch-files-"
"migration-guide>` explains how to migrate ``param`` and ``rosparam`` launch "
"tags from ROS 1 to ROS 2."
msgstr ""
"Le :doc:`Guide de migration des fichiers de lancement <../How-To-"
"Guides/Launch-files-migration-guide>` explique comment migrer les balises de"
" lancement ``param`` et ``rosparam`` de ROS 1 vers ROS 2."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:120
msgid ""
"The :doc:`YAML parameter file migration guide <../How-To-Guides/Parameters-"
"YAML-files-migration-guide>` explains how to migrate parameter files from "
"ROS 1 to ROS 2."
msgstr ""
"Le :doc:`guide de migration des fichiers de paramètres YAML <../How-To-"
"Guides/Parameters-YAML-files-migration-guide>` explique comment migrer les "
"fichiers de paramètres de ROS 1 vers ROS 2."

#: ../../source/Concepts/About-ROS-2-Parameters.rst:122
msgid ""
"In ROS 1, the ``roscore`` acted like a global parameter blackboard where all"
" nodes could get and set parameters. Since there is no central ``roscore`` "
"in ROS 2, that functionality no longer exists. The recommended approach in "
"ROS 2 is to use per-node parameters that are closely tied to the nodes that "
"use them. If a global blackboard is still needed, it is possible to create a"
" dedicated node for this purpose. ROS 2 ships with one in in the ``ros-"
"rolling-demo-nodes-cpp`` package called ``parameter_blackboard``; it can be "
"run with:"
msgstr ""
"Dans ROS 1, le ``roscore`` agissait comme un tableau noir de paramètres "
"globaux où tous les nœuds pouvaient obtenir et définir des paramètres. "
"Puisqu'il n'y a pas de ``roscore`` central dans ROS 2, cette fonctionnalité "
"n'existe plus. L'approche recommandée dans ROS 2 consiste à utiliser des "
"paramètres par nœud étroitement liés aux nœuds qui les utilisent. Si un "
"tableau noir global est encore nécessaire, il est possible de créer un nœud "
"dédié à cet effet. ROS 2 est livré avec un dans le package ``ros-rolling-"
"demo-nodes-cpp`` appelé ``parameter_blackboard`` ; il peut être exécuté avec"
" :"

#: ../../source/Concepts/About-ROS-2-Parameters.rst:132
msgid ""
"The code for the ``parameter_blackboard`` is `here "
"<https://github.com/ros2/demos/blob/rolling/demo_nodes_cpp/src/parameters/parameter_blackboard.cpp>`__."
msgstr ""
"Le code pour le ``parameter_blackboard`` est `ici "
"<https://github.com/ros2/demos/blob/rolling/demo_nodes_cpp/src/parameters/parameter_blackboard.cpp>`__."
