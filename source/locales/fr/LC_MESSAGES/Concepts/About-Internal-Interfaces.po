# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-07 08:44+0100\n"
"PO-Revision-Date: 2023-01-07 14:07:24.808691\n"
"Last-Translator: potranslator 1.1.5\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Translated-By: potranslator 1.1.5\n"

#: ../../source/Concepts/About-Internal-Interfaces.rst:2
msgid "About internal ROS 2 interfaces"
msgstr "À propos des interfaces ROS 2 internes"

#: ../../source/Concepts/About-Internal-Interfaces.rst:6
msgid ""
"The internal ROS interfaces are public C |APIs| that are intended for use by"
" developers who are creating |client libraries| or adding a new underlying "
"middleware, but are not intended for use by typical ROS users. The ROS "
"|client libraries| provide the user facing |APIs| that most ROS users are "
"familiar with, and may come in a variety of programming languages."
msgstr ""
"Les interfaces ROS internes sont des C publics |APIs| destinés à être "
"utilisés par les développeurs qui créent des |bibliothèques clientes| ou "
"l'ajout d'un nouveau middleware sous-jacent, mais ne sont pas destinés à "
"être utilisés par les utilisateurs ROS typiques. Le ROS |bibliothèques "
"clientes| fournir à l'utilisateur face aux |APIs| que la plupart des "
"utilisateurs de ROS connaissent et peuvent être disponibles dans une variété"
" de langages de programmation."

#: ../../source/Concepts/About-Internal-Interfaces.rst:10
msgid "Internal API Architecture Overview"
msgstr "Présentation de l'architecture de l'API interne"

#: ../../source/Concepts/About-Internal-Interfaces.rst:12
msgid "There are two main internal interfaces:"
msgstr "Il existe deux interfaces internes principales :"

#: ../../source/Concepts/About-Internal-Interfaces.rst:14
msgid "the ROS middleware interface (``rmw`` |API|)"
msgstr "l'interface du middleware ROS (``rmw`` |API|)"

#: ../../source/Concepts/About-Internal-Interfaces.rst:15
msgid "the ROS client library interface (``rcl`` |API|)"
msgstr "l'interface de la bibliothèque cliente ROS (``rcl`` |API|)"

#: ../../source/Concepts/About-Internal-Interfaces.rst:17
msgid ""
"The ``rmw`` |API| is the interface between the ROS 2 software stack and the "
"underlying middleware implementation. The underlying middleware used for ROS"
" 2 is either a DDS or RTPS implementation, and is responsible for discovery,"
" publish and subscribe mechanics, request-reply mechanics for services, and "
"serialization of message types."
msgstr ""
"L'|API| ``rmw`` est l'interface entre la pile logicielle ROS 2 et "
"l'implémentation middleware sous-jacente. Le middleware sous-jacent utilisé "
"pour ROS 2 est une implémentation DDS ou RTPS et est responsable des "
"mécanismes de découverte, de publication et d'abonnement, des mécanismes de "
"demande-réponse pour les services et de la sérialisation des types de "
"messages."

#: ../../source/Concepts/About-Internal-Interfaces.rst:20
msgid ""
"The ``rcl`` |API| is a slightly higher level |API| which is used to "
"implement the |client libraries| and does not touch the middleware "
"implementation directly, but rather does so through the ROS middleware "
"interface (``rmw`` |API|) abstraction."
msgstr ""
"L'|API| ``rcl`` est un niveau légèrement supérieur |API| qui est utilisé "
"pour implémenter les |bibliothèques clientes| et ne touche pas directement "
"l'implémentation du middleware, mais le fait plutôt via l'abstraction de "
"l'interface du middleware ROS (``rmw`` |API|)."

#: ../../source/Concepts/About-Internal-Interfaces.rst:None
msgid "ros2 software stack"
msgstr "pile logicielle ros2"

#: ../../source/Concepts/About-Internal-Interfaces.rst:25
msgid ""
"As the diagram shows, these |APIs| are stacked such that the typical ROS "
"user will use the |client library| |API|, e.g. ``rclcpp``, to implement "
"their code (executable or library). The implementation of the |client "
"libraries|, e.g. ``rclcpp``, use the ``rcl`` interface which provides access"
" to the ROS graph and graph events. The ``rcl`` implementation in turn uses "
"the ``rmw`` |API| to access the ROS graph. The purpose of the ``rcl`` "
"implementation is to provide a common implementation for more complex ROS "
"concepts and utilities that may be used by various |client libraries|, while"
" remaining agnostic to the underlying middleware being used. The purpose of "
"the ``rmw`` interface is to capture the absolute minimum middleware "
"functionality needed to support ROS's client libraries. Finally, the "
"implementation of the ``rmw`` |API| is provided by a middleware "
"implementation specific |package|, e.g. ``rmw_fastrtps_cpp``, the library of"
" which is compiled against vendor specific DDS interfaces and types."
msgstr ""
"Comme le montre le diagramme, ces |APIs| sont empilés de telle sorte que "
"l'utilisateur ROS typique utilisera la |bibliothèque client| |API|, par ex. "
"``rclcpp``, pour implémenter leur code (exécutable ou bibliothèque). "
"L'implémentation des |bibliothèques clientes|, par ex. ``rclcpp``, utilisez "
"l'interface ``rcl`` qui donne accès au graphe ROS et aux événements de "
"graphe. L'implémentation ``rcl`` utilise à son tour l'API| ``rmw`` | pour "
"accéder au graphique ROS. Le but de l'implémentation ``rcl`` est de fournir "
"une implémentation commune pour des concepts et des utilitaires ROS plus "
"complexes qui peuvent être utilisés par diverses |bibliothèques clientes|, "
"tout en restant indépendant du middleware sous-jacent utilisé. Le but de "
"l'interface ``rmw`` est de capturer la fonctionnalité minimale absolue du "
"middleware nécessaire pour prendre en charge les bibliothèques clientes de "
"ROS. Enfin, l'implémentation de l'|API| ``rmw`` est fourni par un |package| "
"spécifique à l'implémentation du middleware, par ex. ``rmw_fastrtps_cpp``, "
"dont la bibliothèque est compilée avec les interfaces et les types DDS "
"spécifiques au fournisseur."

#: ../../source/Concepts/About-Internal-Interfaces.rst:32
msgid ""
"In the diagram above there is also a box labeled ``ros_to_dds``, and the "
"purpose of this box is to represent a category of possible packages which "
"allow the user to access DDS vendor specific objects and settings using the "
"ROS equivalents. One of the goals of this abstraction interface is to "
"completely insulate the ROS user space code from the middleware being used, "
"so that changing DDS vendors or even middleware technology has a minimal "
"impact on the users code. However, we recognize that on occasion it is "
"useful to reach into the implementation and manually adjust settings despite"
" the consequences that might have. By requiring the use of one of these "
"packages in order to access the underlying DDS vendor's objects, we can "
"avoid exposing vendor specific symbols and headers in the normal interface. "
"It also makes it easy to see what code is potentially violating the vendor "
"portability by inspecting the package's dependencies to see if one of these "
"``ros_to_dds`` packages are being used."
msgstr ""
"Dans le diagramme ci-dessus, il y a aussi une boîte intitulée "
"``ros_to_dds``, et le but de cette boîte est de représenter une catégorie de"
" packages possibles qui permettent à l'utilisateur d'accéder aux objets et "
"paramètres spécifiques au fournisseur DDS en utilisant les équivalents ROS. "
"L'un des objectifs de cette interface d'abstraction est d'isoler "
"complètement le code de l'espace utilisateur ROS du middleware utilisé, de "
"sorte que le changement de fournisseur DDS ou même de technologie middleware"
" ait un impact minimal sur le code des utilisateurs. Cependant, nous "
"reconnaissons qu'il est parfois utile d'accéder à la mise en œuvre et "
"d'ajuster manuellement les paramètres malgré les conséquences que cela "
"pourrait avoir. En exigeant l'utilisation de l'un de ces packages pour "
"accéder aux objets du fournisseur DDS sous-jacent, nous pouvons éviter "
"d'exposer des symboles et des en-têtes spécifiques au fournisseur dans "
"l'interface normale. Cela permet également de voir facilement quel code "
"viole potentiellement la portabilité du fournisseur en inspectant les "
"dépendances du paquet pour voir si l'un de ces paquets ``ros_to_dds`` est "
"utilisé."

#: ../../source/Concepts/About-Internal-Interfaces.rst:41
msgid "Type Specific Interfaces"
msgstr "Interfaces spécifiques au type"

#: ../../source/Concepts/About-Internal-Interfaces.rst:43
msgid ""
"All along the way there are some parts of the |APIs| that are necessarily "
"specific to the message types being exchanged, e.g. publishing a message or "
"subscribing to a topic, and therefore require generated code for each "
"message type. The following diagram layouts the path from user defined "
"``rosidl`` files, e.g. ``.msg`` files, to the type specific code used by the"
" user and system to perform type specific functions:"
msgstr ""
"Tout au long du chemin, il y a certaines parties des |APIs| qui sont "
"nécessairement spécifiques aux types de messages échangés, par ex. publier "
"un message ou s'abonner à un sujet, et nécessitent donc un code généré pour "
"chaque type de message. Le diagramme suivant présente le chemin à partir des"
" fichiers ``rosidl`` définis par l'utilisateur, par ex. Fichiers ``.msg``, "
"au code spécifique au type utilisé par l'utilisateur et le système pour "
"exécuter des fonctions spécifiques au type :"

#: ../../source/Concepts/About-Internal-Interfaces.rst:49
msgid "ros2 idl static type support stack"
msgstr "pile de support de type statique ros2 idl"

#: ../../source/Concepts/About-Internal-Interfaces.rst:49
msgid ""
"Figure: flow chart of \"static\" type support generation, from ``rosidl`` "
"files to user facing code."
msgstr ""
"Figure : organigramme de la génération de support de type \"statique\", des "
"fichiers ``rosidl`` au code utilisateur."

#: ../../source/Concepts/About-Internal-Interfaces.rst:51
msgid ""
"The right hand side of the diagram shows how the ``.msg`` files are passed "
"directly to language specific code generators, e.g. ``rosidl_generator_cpp``"
" or ``rosidl_generator_py``. These generators are responsible for creating "
"the code that the user will include (or import) and use as the in-memory "
"representation of the messages that were defined in the ``.msg`` files. For "
"example, consider the message ``std_msgs/String``, a user might use this "
"file in C++ with the statement ``#include <std_msgs/msg/string.hpp>``, or "
"they might use the statement ``from std_msgs.msg import String`` in Python. "
"These statements work because of the files generated by these language "
"specific (but middleware agnostic) generator packages."
msgstr ""
"Le côté droit du diagramme montre comment les fichiers ``.msg`` sont "
"transmis directement aux générateurs de code spécifiques à la langue, par "
"ex. ``rosidl_generator_cpp`` ou ``rosidl_generator_py``. Ces générateurs "
"sont chargés de créer le code que l'utilisateur inclura (ou importera) et "
"utilisera comme représentation en mémoire des messages qui ont été définis "
"dans les fichiers ``.msg``. Par exemple, considérez le message "
"``std_msgs/String``, un utilisateur peut utiliser ce fichier en C++ avec "
"l'instruction ``#include <std_msgs/msg/string.hpp>``, ou il peut utiliser "
"l'instruction ``from std_msgs.msg import String`` en Python. Ces "
"instructions fonctionnent grâce aux fichiers générés par ces packages "
"générateurs spécifiques au langage (mais indépendants du middleware)."

#: ../../source/Concepts/About-Internal-Interfaces.rst:56
msgid ""
"Separately, the ``.msg`` files are used to generate type support code for "
"each type. In this context, type support means: meta data or functions that "
"are specific to a given type and that are used by the system to perform "
"particular tasks for the given type. The type support for a given message "
"might include things like a list of the names and types for each field in "
"the message. It might also contain a reference to code that can perform "
"particular tasks for that type, e.g. publish a message."
msgstr ""
"Séparément, les fichiers ``.msg`` sont utilisés pour générer le code de "
"support de type pour chaque type. Dans ce contexte, le support de type "
"signifie : des métadonnées ou des fonctions qui sont spécifiques à un type "
"donné et qui sont utilisées par le système pour effectuer des tâches "
"particulières pour le type donné. La prise en charge du type pour un message"
" donné peut inclure des éléments tels qu'une liste des noms et des types "
"pour chaque champ du message. Il peut également contenir une référence au "
"code qui peut effectuer des tâches particulières pour ce type, par ex. "
"publier un message."

#: ../../source/Concepts/About-Internal-Interfaces.rst:62
msgid "Static Type Support"
msgstr "Prise en charge du type statique"

#: ../../source/Concepts/About-Internal-Interfaces.rst:64
msgid ""
"When the type support references code to do particular functions for a "
"specific message type, that code sometimes needs to do middleware specific "
"work. For example, consider the type specific publish function, when using "
"\"vendor A\" the function will need to call some of \"vendor A\"'s |API|, "
"but when using \"vendor B\" it will need to call \"vendor B\"'s |API|. To "
"allow for middleware vendor specific code, the user defined ``.msg`` files "
"may result in the generation of vendor specific code. This vendor specific "
"code is still hidden from the user through the type support abstraction, "
"which is similar to how the \"Private Implementation\" (or Pimpl) pattern "
"works."
msgstr ""
"Lorsque la prise en charge du type fait référence à du code pour effectuer "
"des fonctions particulières pour un type de message spécifique, ce code doit"
" parfois effectuer un travail spécifique au middleware. Par exemple, "
"considérez la fonction de publication spécifique au type, lors de "
"l'utilisation du \"fournisseur A\", la fonction devra appeler certaines des "
"|API| du \"fournisseur A\", mais lors de l'utilisation du \"fournisseur B\","
" elle devra appeler le \"fournisseur B\" l'|API|. Pour autoriser le code "
"spécifique au fournisseur du middleware, les fichiers ``.msg`` définis par "
"l'utilisateur peuvent entraîner la génération d'un code spécifique au "
"fournisseur. Ce code spécifique au fournisseur est toujours caché à "
"l'utilisateur via l'abstraction de prise en charge de type, qui est "
"similaire au fonctionnement du modèle \"Private Implementation\" (ou Pimpl)."

#: ../../source/Concepts/About-Internal-Interfaces.rst:70
msgid "Static Type Support with DDS"
msgstr "Prise en charge du type statique avec DDS"

#: ../../source/Concepts/About-Internal-Interfaces.rst:72
msgid ""
"For middleware vendors based on DDS, and specifically those which generate "
"code based on the OMG IDL files (``.idl`` files), the user defined "
"``rosidl`` files (``.msg`` files) are converted into equivalent OMG IDL "
"files (``.idl`` files). From these OMG IDL files, vendor specific code is "
"created and then used within the type specific functions which are "
"referenced by the type support for a given type. The above diagram shows "
"this on the left hand side, where the ``.msg`` files are consumed by the "
"``rosidl_dds`` package to produce ``.idl`` files, and then those ``.idl`` "
"files are given to language specific and DDS vendor specific type support "
"generation packages."
msgstr ""
"Pour les fournisseurs de middleware basés sur DDS, et plus particulièrement "
"ceux qui génèrent du code basé sur les fichiers OMG IDL (fichiers ``.idl``),"
" les fichiers ``rosidl`` définis par l'utilisateur (fichiers ``.msg``) sont "
"convertis en fichiers OMG IDL équivalents (fichiers ``.idl``). À partir de "
"ces fichiers OMG IDL, un code spécifique au fournisseur est créé puis "
"utilisé dans les fonctions spécifiques au type qui sont référencées par la "
"prise en charge du type pour un type donné. Le diagramme ci-dessus le montre"
" sur le côté gauche, où les fichiers ``.msg`` sont consommés par le package "
"``rosidl_dds`` pour produire des fichiers ``.idl``, puis ces fichiers "
"``.idl`` sont donnés aux packages de génération de prise en charge "
"spécifiques à la langue et au fournisseur DDS."

#: ../../source/Concepts/About-Internal-Interfaces.rst:76
msgid ""
"For example, consider the Fast DDS implementation, which has a package "
"called ``rosidl_typesupport_fastrtps_cpp``. This package is responsible for "
"generating code to handle things like converting a C++ message object into a"
" serialized octet buffer to be written over the network. This code, while "
"specific to Fast DDS, is still not exposed to the user because of the "
"abstraction in the type support code."
msgstr ""
"Par exemple, considérez l'implémentation Fast DDS, qui a un package appelé "
"``rosidl_typesupport_fastrtps_cpp``. Ce package est chargé de générer du "
"code pour gérer des choses comme la conversion d'un objet de message C++ en "
"un tampon d'octets sérialisé à écrire sur le réseau. Ce code, bien que "
"spécifique à Fast DDS, n'est toujours pas exposé à l'utilisateur en raison "
"de l'abstraction dans le code de prise en charge du type."

#: ../../source/Concepts/About-Internal-Interfaces.rst:81
msgid "Dynamic Type Support"
msgstr "Prise en charge des types dynamiques"

#: ../../source/Concepts/About-Internal-Interfaces.rst:83
msgid ""
"Another way to implement type support is to have generic functions for "
"things like publishing to a topic, rather than generating a version of the "
"function for each message type. In order to accomplish this, this generic "
"function needs some meta information about the message type being published,"
" things like a list of field names and types in the order in which they "
"appear in the message type. Then to publish a message, you call a generic "
"publish function and pass a message to be published along with a structure "
"which contains the necessary meta data about the message type. This is "
"referred to as \"dynamic\" type support, as opposed to \"static\" type "
"support which requires generated versions of a function for each type."
msgstr ""
"Une autre façon d'implémenter la prise en charge des types est d'avoir des "
"fonctions génériques pour des choses comme la publication dans un sujet, "
"plutôt que de générer une version de la fonction pour chaque type de "
"message. Pour ce faire, cette fonction générique a besoin de certaines méta-"
"informations sur le type de message publié, comme une liste de noms de "
"champs et de types dans l'ordre dans lequel ils apparaissent dans le type de"
" message. Ensuite, pour publier un message, vous appelez une fonction de "
"publication générique et transmettez un message à publier avec une structure"
" qui contient les métadonnées nécessaires sur le type de message. C'est ce "
"qu'on appelle la prise en charge de type \"dynamique\", par opposition à la "
"prise en charge de type \"statique\" qui nécessite des versions générées "
"d'une fonction pour chaque type."

#: ../../source/Concepts/About-Internal-Interfaces.rst:91
msgid "ros2 idl dynamic type support stack"
msgstr "pile de support de type dynamique ros2 idl"

#: ../../source/Concepts/About-Internal-Interfaces.rst:91
msgid ""
"Figure: flow chart of \"dynamic\" type support generation, from ``rosidl`` "
"files to user facing code."
msgstr ""
"Figure : organigramme de la génération de support de type \"dynamique\", des"
" fichiers ``rosidl`` au code utilisateur."

#: ../../source/Concepts/About-Internal-Interfaces.rst:93
msgid ""
"The above diagram shows the flow from user defined ``rosidl`` files to "
"generated user facing code. It is very similar to the diagram for static "
"type support, and differs only in how the type support is generated which is"
" represented by the left hand side of the diagram. In dynamic type support "
"the ``.msg`` files are converted directly into user facing code."
msgstr ""
"Le diagramme ci-dessus montre le flux depuis les fichiers ``rosidl`` définis"
" par l'utilisateur jusqu'au code utilisateur généré. Il est très similaire "
"au diagramme de prise en charge de type statique et ne diffère que par la "
"manière dont la prise en charge de type est générée, représentée par le côté"
" gauche du diagramme. Dans le support de type dynamique, les fichiers "
"``.msg`` sont convertis directement en code utilisateur."

#: ../../source/Concepts/About-Internal-Interfaces.rst:97
msgid ""
"This code is also middleware agnostic, because it only contains meta "
"information about the messages. The function to actually do the work, e.g. "
"publishing to a topic, is generic to the message type and will make any "
"necessary calls to the middleware specific |APIs|. Note that rather than dds"
" vendor specific packages providing the type support code, which is the case"
" in static type support, this method has middleware agnostic package for "
"each language, e.g. ``rosidl_typesupport_introspection_c`` and "
"``rosidl_typesupport_introspection_cpp``. The ``introspection`` part of the "
"package name refers to the ability to introspect any message instance with "
"the generated meta data for the message type. This is the fundamental "
"capability that allows for generic implementations of functions like "
"\"publish to a topic\"."
msgstr ""
"Ce code est également indépendant du middleware, car il ne contient que des "
"méta-informations sur les messages. La fonction pour effectuer réellement le"
" travail, par ex. la publication dans un sujet, est générique pour le type "
"de message et effectuera tous les appels nécessaires aux |API| spécifiques "
"au middleware. Notez que plutôt que des packages spécifiques au fournisseur "
"dds fournissant le code de prise en charge de type, ce qui est le cas dans "
"la prise en charge de type statique, cette méthode a un package indépendant "
"du middleware pour chaque langue, par ex. "
"``rosidl_typesupport_introspection_c`` et "
"``rosidl_typesupport_introspection_cpp``. La partie ``introspection`` du nom"
" du package fait référence à la possibilité d'introspecter n'importe quelle "
"instance de message avec les métadonnées générées pour le type de message. "
"Il s'agit de la capacité fondamentale qui permet des implémentations "
"génériques de fonctions telles que \"publier dans un sujet\"."

#: ../../source/Concepts/About-Internal-Interfaces.rst:103
msgid ""
"This approach has the advantage that all generated code is middleware "
"agnostic, which means it can be reused for different middleware "
"implementations, so long as they allow for dynamic type support. It also "
"results in less generated code, which reduces compile time and code size."
msgstr ""
"Cette approche présente l'avantage que tout le code généré est indépendant "
"du middleware, ce qui signifie qu'il peut être réutilisé pour différentes "
"implémentations de middleware, tant qu'elles permettent la prise en charge "
"de type dynamique. Il en résulte également moins de code généré, ce qui "
"réduit le temps de compilation et la taille du code."

#: ../../source/Concepts/About-Internal-Interfaces.rst:106
msgid ""
"However, dynamic type support requires that the underlying middleware "
"support a similar form of dynamic type support. In the case of DDS the DDS-"
"XTypes standard allows for publishing of messages using meta information "
"rather than generated code. DDS-XTypes, or something like it, is required in"
" the underlying middleware in order to support dynamic type support. Also, "
"this approach to type support is normally slower than the static type "
"support alternative. The type specific generated code in static type support"
" can be written to be more efficient as it does not need to iterate over the"
" message type's meta data to perform things like serialization."
msgstr ""
"Cependant, la prise en charge de type dynamique nécessite que le middleware "
"sous-jacent prenne en charge une forme similaire de prise en charge de type "
"dynamique. Dans le cas de DDS, la norme DDS-XTypes permet la publication de "
"messages à l'aide de méta-informations plutôt que de code généré. DDS-"
"XTypes, ou quelque chose de similaire, est requis dans le middleware sous-"
"jacent afin de prendre en charge la prise en charge de type dynamique. De "
"plus, cette approche de la prise en charge des types est normalement plus "
"lente que l'alternative de prise en charge des types statiques. Le code "
"généré spécifique au type dans la prise en charge du type statique peut être"
" écrit pour être plus efficace car il n'a pas besoin d'itérer sur les "
"métadonnées du type de message pour effectuer des opérations telles que la "
"sérialisation."

#: ../../source/Concepts/About-Internal-Interfaces.rst:113
msgid "The ``rcl`` Repository"
msgstr "Le référentiel ``rcl``"

#: ../../source/Concepts/About-Internal-Interfaces.rst:115
msgid ""
"The ROS Client Library interface (``rcl`` |API|) can be used by |client "
"libraries| (e.g. ``rclc``, ``rclcpp``, ``rclpy``, etc.) in order to avoid "
"duplicating logic and features. By reusing the ``rcl`` |API|, client "
"libraries can be smaller and more consistent with each other. Some parts of "
"the client library are intentionally left out of the ``rcl`` |API| because "
"the language idiomatic method should be used to implement those parts of the"
" system. A good example of this is the execution model, which ``rcl`` does "
"not address at all. Instead the client library should provide a language "
"idiomatic solution like ``pthreads`` in C, ``std::thread`` in C++11, and "
"``threading.Thread`` in Python. Generally the ``rcl`` interface provides "
"functions that are not specific to a language pattern and are not specific "
"to a particular message type."
msgstr ""
"L'interface de la bibliothèque cliente ROS (``rcl`` |API|) peut être "
"utilisée par les |bibliothèques clientes| (par exemple ``rclc``, ``rclcpp``,"
" ``rclpy``, etc.) afin d'éviter la duplication de la logique et des "
"fonctionnalités. En réutilisant l'|API| ``rcl``, les bibliothèques clientes "
"peuvent être plus petites et plus cohérentes les unes avec les autres. "
"Certaines parties de la bibliothèque cliente sont intentionnellement "
"laissées de côté par ``rcl`` |API| parce que la méthode idiomatique du "
"langage doit être utilisée pour mettre en œuvre ces parties du système. Un "
"bon exemple de ceci est le modèle d'exécution, que ``rcl`` ne traite pas du "
"tout. Au lieu de cela, la bibliothèque cliente devrait fournir une solution "
"idiomatique de langage comme ``pthreads`` en C, ``std::thread`` en C++11 et "
"``threading.Thread`` en Python. Généralement, l'interface ``rcl`` fournit "
"des fonctions qui ne sont pas spécifiques à un modèle de langage et ne sont "
"pas spécifiques à un type de message particulier."

#: ../../source/Concepts/About-Internal-Interfaces.rst:122
msgid ""
"The ``rcl`` |API| is located in the `ros2/rcl "
"<https://github.com/ros2/rcl>`_ repository on |GitHub|_ and contains the "
"interface as C headers. The ``rcl`` C implementation is provided by the "
"``rcl`` |package| in the same repository. This implementation avoids direct "
"contact with the middleware by instead using the ``rmw`` and ``rosidl`` "
"|APIs|."
msgstr ""
"L'|API| ``rcl`` est situé dans le référentiel `ros2/rcl "
"<https://github.com/ros2/rcl>`_ sur |GitHub|_ et contient l'interface sous "
"forme d'en-têtes C. L'implémentation ``rcl`` C est fournie par le ``rcl`` "
"|package| dans le même référentiel. Cette implémentation évite le contact "
"direct avec le middleware en utilisant à la place les |APIs| ``rmw`` et "
"``rosidl``."

#: ../../source/Concepts/About-Internal-Interfaces.rst:126
msgid ""
"For a complete definition of the ``rcl`` |API|, see its `API documentation "
"<http://docs.ros2.org/foxy/api/rcl/index.html>`_:"
msgstr ""
"Pour une définition complète de ``rcl`` |API|, consultez sa `documentation "
"API <http://docs.ros2.org/foxy/api/rcl/index.html>`_ :"

#: ../../source/Concepts/About-Internal-Interfaces.rst:129
msgid "The ``rmw`` Repository"
msgstr "Le référentiel ``rmw``"

#: ../../source/Concepts/About-Internal-Interfaces.rst:131
msgid ""
"The ROS middleware interface (``rmw`` |API|) is the minimal set of primitive"
" middleware capabilities needed to build ROS on top. Providers of different "
"middleware implementations must implement this interface in order to support"
" the entire ROS stack on top. Currently all of the middleware "
"implementations are for different DDS vendors."
msgstr ""
"L'interface middleware ROS (``rmw`` |API|) est l'ensemble minimal de "
"fonctionnalités middleware primitives nécessaires pour construire ROS par "
"dessus. Les fournisseurs de différentes implémentations de middleware "
"doivent implémenter cette interface afin de prendre en charge l'ensemble de "
"la pile ROS. Actuellement, toutes les implémentations de middleware sont "
"destinées à différents fournisseurs de DDS."

#: ../../source/Concepts/About-Internal-Interfaces.rst:135
msgid ""
"The ``rmw`` |API| is located in the `ros2/rmw "
"<https://github.com/ros2/rmw>`_ repository. The ``rmw`` |package| contains "
"the C headers which define the interface, the implementation of which is "
"provided by the various |packages| of rmw implementations for different DDS "
"vendors."
msgstr ""
"L'|API| ``rmw`` se trouve dans le dépôt `ros2/rmw "
"<https://github.com/ros2/rmw>`_. Le |paquet| ``rmw`` contient les en-têtes C"
" qui définissent l'interface dont l'implémentation est assurée par les "
"différents |packages| d'implémentations rmw pour différents fournisseurs de "
"DDS."

#: ../../source/Concepts/About-Internal-Interfaces.rst:138
msgid "For a definition of the ``rmw`` |API|, see the |API| docs:"
msgstr "Pour une définition de l'|API| ``rmw``, voir l'|API| documents :"

#: ../../source/Concepts/About-Internal-Interfaces.rst:140
msgid "`api/rmw/index.html <http://docs.ros2.org/foxy/api/rmw/index.html>`_"
msgstr "`api/rmw/index.html <http://docs.ros2.org/foxy/api/rmw/index.html>`_"

#: ../../source/Concepts/About-Internal-Interfaces.rst:144
msgid "The ``rosidl`` Repository"
msgstr "Le référentiel ``rosidl``"

#: ../../source/Concepts/About-Internal-Interfaces.rst:146
msgid ""
"The ``rosidl`` |API| consists of a few message related static functions and "
"types along with a definition of what code should be generated by messages "
"in different languages. The generated message code specified in the |API| "
"will be language specific, but may or may not reuse generated code for other"
" languages. The generated message code specified in the |API| contains "
"things like the message data structure, functions for construction, "
"destruction, etc. The |API| will also implement a way to get the type "
"support structure for the message type, which is used when publishing or "
"subscribing to a topic of that message type."
msgstr ""
"L'|API| ``rosidl`` se compose de quelques fonctions et types statiques liés "
"aux messages, ainsi que d'une définition du code qui doit être généré par "
"les messages dans différentes langues. Le code de message généré spécifié "
"dans l'|API| sera spécifique à la langue, mais peut ou non réutiliser le "
"code généré pour d'autres langues. Le code de message généré spécifié dans "
"l'|API| contient des éléments tels que la structure des données du message, "
"les fonctions de construction, de destruction, etc. L'|API| implémentera "
"également un moyen d'obtenir la structure de support de type pour le type de"
" message, qui est utilisée lors de la publication ou de l'abonnement à un "
"sujet de ce type de message."

#: ../../source/Concepts/About-Internal-Interfaces.rst:151
msgid ""
"There are several repositories that play a role in the ``rosidl`` |API| and "
"implementation."
msgstr ""
"Il existe plusieurs dépôts qui jouent un rôle dans le ``rosidl`` |API| et la"
" mise en œuvre."

#: ../../source/Concepts/About-Internal-Interfaces.rst:153
msgid ""
"The ``rosidl`` repository, located on |GitHub|_ at `ros2/rosidl "
"<https://github.com/ros2/rosidl>`_, defines the message IDL syntax, i.e. "
"syntax of ``.msg`` files, ``.srv`` files, etc., and contains |packages| for "
"parsing the files, for providing CMake infrastructure to generate code from "
"the messages, for generating implementation agnostic code (headers and "
"source files), and for establishing the default set of generators. The "
"repository contains these |packages|:"
msgstr ""
"Le référentiel ``rosidl``, situé sur |GitHub|_ à `ros2/rosidl "
"<https://github.com/ros2/rosidl>`_, définit la syntaxe IDL du message, "
"c'est-à-dire la syntaxe de ``.msg`` fichiers, fichiers ``.srv``, etc., et "
"contient des |packages| pour analyser les fichiers, pour fournir une "
"infrastructure CMake pour générer du code à partir des messages, pour "
"générer du code indépendant de l'implémentation (en-têtes et fichiers "
"source) et pour établir l'ensemble de générateurs par défaut. Le dépôt "
"contient ces |packages| :"

#: ../../source/Concepts/About-Internal-Interfaces.rst:156
msgid ""
"``rosidl_cmake``: provides CMake functions and CMake Modules for generating "
"code from ``rosidl`` files, e.g. ``.msg`` files, ``.srv`` files, etc."
msgstr ""
"``rosidl_cmake`` : fournit des fonctions CMake et des modules CMake pour "
"générer du code à partir de fichiers ``rosidl``, par ex. Fichiers ``.msg``, "
"fichiers ``.srv``, etc."

#: ../../source/Concepts/About-Internal-Interfaces.rst:157
msgid ""
"``rosidl_default_generators``: defines the list of default generators which "
"ensures that they are installed as dependencies, but other injected "
"generators can also be used."
msgstr ""
"``rosidl_default_generators`` : définit la liste des générateurs par défaut "
"qui garantit qu'ils sont installés en tant que dépendances, mais d'autres "
"générateurs injectés peuvent également être utilisés."

#: ../../source/Concepts/About-Internal-Interfaces.rst:158
msgid ""
"``rosidl_generator_c``: provides tools to generate C header files (``.h``) "
"for ``rosidl`` files."
msgstr ""
"``rosidl_generator_c`` : fournit des outils pour générer des fichiers d'en-"
"tête C (``.h``) pour les fichiers ``rosidl``."

#: ../../source/Concepts/About-Internal-Interfaces.rst:159
msgid ""
"``rosidl_generator_cpp``: provides tools to generate C++ header files "
"(``.hpp``) for ``rosidl`` files."
msgstr ""
"``rosidl_generator_cpp`` : fournit des outils pour générer des fichiers "
"d'en-tête C++ (``.hpp``) pour les fichiers ``rosidl``."

#: ../../source/Concepts/About-Internal-Interfaces.rst:160
msgid ""
"``rosidl_generator_py``: provides tools to generate Python modules for "
"``rosidl`` files."
msgstr ""
"``rosidl_generator_py`` : fournit des outils pour générer des modules Python"
" pour les fichiers ``rosidl``."

#: ../../source/Concepts/About-Internal-Interfaces.rst:161
msgid "``rosidl_parser``: provides Python |API| for parsing ``rosidl`` files."
msgstr ""
"``rosidl_parser`` : fournit Python |API| pour analyser les fichiers "
"``rosidl``."

#: ../../source/Concepts/About-Internal-Interfaces.rst:163
msgid ""
"Generators for other languages, e.g. ``rosidl_generator_java``, are hosted "
"externally (in different repositories) but would use the same mechanism that"
" the above generators use to \"register\" themselves as a ``rosidl`` "
"generator."
msgstr ""
"Générateurs pour d'autres langues, par ex. ``rosidl_generator_java``, sont "
"hébergés en externe (dans différents référentiels) mais utiliseraient le "
"même mécanisme que les générateurs ci-dessus utilisent pour "
"\"s'enregistrer\" en tant que générateur ``rosidl``."

#: ../../source/Concepts/About-Internal-Interfaces.rst:165
msgid ""
"In addition to the aforementioned |packages| for parsing and generating "
"headers for the ``rosidl`` files, the ``rosidl`` repository also contains "
"|packages| concerned with \"type support\" for the message types defined in "
"the files. Type support refers to the ability to interpret and manipulate "
"the information represented by ROS message instances of particular types "
"(publishing the messages, for example). Type support can either be provided "
"by code that is generated at compile time or it can be done programmatically"
" based on the contents of the ``rosidl`` file, e.g. the ``.msg`` or ``.srv``"
" file, and the data received, by introspecting the data. In the case of the "
"latter, where type support is done through runtime interpretation of the "
"messages, the message code generated by ROS 2 can be agnostic to the rmw "
"implementation. The packages that provide this type support through "
"introspection of the data are:"
msgstr ""
"En plus des |forfaits| mentionnés ci-dessus pour analyser et générer des en-"
"têtes pour les fichiers ``rosidl``, le référentiel ``rosidl`` contient "
"également des |packages| concerné par le \"support de type\" pour les types "
"de messages définis dans les fichiers. La prise en charge des types fait "
"référence à la capacité d'interpréter et de manipuler les informations "
"représentées par des instances de messages ROS de types particuliers "
"(publier les messages, par exemple). La prise en charge des types peut être "
"fournie par le code généré au moment de la compilation ou par programmation "
"en fonction du contenu du fichier ``rosidl``, par ex. le fichier ``.msg`` ou"
" ``.srv``, et les données reçues, en introspectant les données. Dans ce "
"dernier cas, où la prise en charge du type se fait par l'interprétation des "
"messages à l'exécution, le code de message généré par ROS 2 peut être "
"indépendant de l'implémentation rmw. Les packages qui fournissent ce type de"
" support via l'introspection des données sont :"

#: ../../source/Concepts/About-Internal-Interfaces.rst:171
msgid ""
"``rosidl_typesupport_introspection_c``: provides tools for generating C code"
" for supporting ``rosidl`` message data types."
msgstr ""
"``rosidl_typesupport_introspection_c`` : fournit des outils pour générer du "
"code C pour prendre en charge les types de données de message ``rosidl``."

#: ../../source/Concepts/About-Internal-Interfaces.rst:172
msgid ""
"``rosidl_typesupport_introspection_cpp``: provides tools for generating C++ "
"code for supporting ``rosidl`` message data types."
msgstr ""
"``rosidl_typesupport_introspection_cpp`` : fournit des outils pour générer "
"du code C++ pour prendre en charge les types de données de message "
"``rosidl``."

#: ../../source/Concepts/About-Internal-Interfaces.rst:174
msgid ""
"In the case where type support is to be generated at compile time instead of"
" being generated programmatically, a package specific to the rmw "
"implementation will need to be used. This is because typically a particular "
"rmw implementation will require data to be stored and manipulated in a "
"manner that is specific to the DDS vendor in order for the DDS "
"implementation to make use of it. See the :ref:`Type Specific Interfaces` "
"section above for more details."
msgstr ""
"Dans le cas où le support de type doit être généré au moment de la "
"compilation au lieu d'être généré par programme, un package spécifique à "
"l'implémentation rmw devra être utilisé. En effet, une implémentation rmw "
"particulière nécessitera généralement que les données soient stockées et "
"manipulées d'une manière spécifique au fournisseur DDS afin que "
"l'implémentation DDS puisse les utiliser. Voir la section :ref:`Type "
"Specific Interfaces` ci-dessus pour plus de détails."

#: ../../source/Concepts/About-Internal-Interfaces.rst:178
msgid ""
"For more information on what exactly is in the ``rosidl`` |API| (static and "
"generated) see this page:"
msgstr ""
"Pour plus d'informations sur le contenu exact de l'|API| ``rosidl`` "
"(statique et généré) voir cette page :"

#: ../../source/Concepts/About-Internal-Interfaces.rst:182
msgid "TODO: link to definition of ``rosidl`` |APIs|"
msgstr "TODO : lien vers la définition de ``rosidl`` |APIs|"

#: ../../source/Concepts/About-Internal-Interfaces.rst:185
msgid "The ``rcutils`` Repository"
msgstr "Le référentiel ``rutils``"

#: ../../source/Concepts/About-Internal-Interfaces.rst:187
msgid ""
"ROS 2 C Utilities (``rcutils``) is a C |API| composed of macros, functions, "
"and data structures used throughout the ROS 2 codebase. These are mainly "
"used for error handling, commandline argument parsing, and logging which are"
" not specific to the client or middleware layers and can be shared by both."
msgstr ""
"ROS 2 C Utilities (``rcutils``) est un C |API| composé de macros, de "
"fonctions et de structures de données utilisées dans la base de code ROS 2. "
"Ceux-ci sont principalement utilisés pour la gestion des erreurs, l'analyse "
"des arguments de ligne de commande et la journalisation qui ne sont pas "
"spécifiques aux couches client ou middleware et peuvent être partagées par "
"les deux."

#: ../../source/Concepts/About-Internal-Interfaces.rst:190
msgid ""
"The ``rcutils`` |API| and implementation are located in the `ros2/rcutils "
"<https://github.com/ros2/rcutils>`_ repository on |GitHub|_ which contains "
"the interface as C headers."
msgstr ""
"Les ``rutils`` |API| et l'implémentation se trouvent dans le référentiel "
"`ros2/rcutils <https://github.com/ros2/rcutils>`_ sur |GitHub|_ qui contient"
" l'interface sous forme d'en-têtes C."

#: ../../source/Concepts/About-Internal-Interfaces.rst:192
msgid ""
"For a complete definition of the ``rcutils`` |API|, see `its API "
"documentation <http://docs.ros2.org/foxy/api/rcutils/index.html>`_"
msgstr ""
"Pour une définition complète de ``rcutils`` |API|, consultez `sa "
"documentation API <http://docs.ros2.org/foxy/api/rcutils/index.html>`_"
