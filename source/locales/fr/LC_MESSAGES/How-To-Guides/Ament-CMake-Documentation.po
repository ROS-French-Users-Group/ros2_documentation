# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-07 08:44+0100\n"
"PO-Revision-Date: 2023-01-07 17:20:50.670449\n"
"Last-Translator: potranslator 1.1.5\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Translated-By: potranslator 1.1.5\n"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:7
msgid "ament_cmake user documentation"
msgstr "documentation utilisateur ament_cmake"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:9
msgid ""
"ament_cmake is the build system for CMake based packages in ROS 2 (in "
"particular, it will be used for most if not all C/C++ projects). It is a set"
" of scripts enhancing CMake and adding convenience functionality for package"
" authors. Knowing the basics of `CMake "
"<https://cmake.org/cmake/help/v3.5/>`__ will be very helpful, an official "
"tutorial can be found `here "
"<https://cmake.org/cmake/help/latest/guide/tutorial/index.html>`__."
msgstr ""
"ament_cmake est le système de construction pour les packages basés sur CMake"
" dans ROS 2 (en particulier, il sera utilisé pour la plupart sinon tous les "
"projets C/C++). Il s'agit d'un ensemble de scripts améliorant CMake et "
"ajoutant des fonctionnalités pratiques pour les auteurs de packages. "
"Connaître les bases de `CMake <https://cmake.org/cmake/help/v3.5/>`__ sera "
"très utile, un tutoriel officiel peut être trouvé `ici "
"<https://cmake.org/cmake/ aide/dernier/guide/tutoriel/index.html>`__."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:15
msgid "Table of Contents"
msgstr "Table des matières"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:18
msgid "Basics"
msgstr "Bases"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:20
msgid ""
"A basic CMake outline can be produced using ``ros2 pkg create "
"<package_name>`` on the command line. The basic build information is then "
"gathered in two files: the ``package.xml`` and the ``CMakeLists.txt``. The "
"``package.xml`` must contain all dependencies and a bit of metadata to allow"
" colcon to find the correct build order for your packages, to install the "
"required dependencies in CI as well as provide the information for a release"
" with ``bloom``. The ``CMakeLists.txt`` contains the commands to build and "
"package executables and libraries and will be the main focus of this "
"document."
msgstr ""
"Un aperçu de base de CMake peut être produit en utilisant ``ros2 pkg create "
"<package_name>`` sur la ligne de commande. Les informations de construction "
"de base sont ensuite rassemblées dans deux fichiers : le ``package.xml`` et "
"le ``CMakeLists.txt``. Le ``package.xml`` doit contenir toutes les "
"dépendances et un peu de métadonnées pour permettre à colcon de trouver le "
"bon ordre de construction pour vos packages, d'installer les dépendances "
"requises dans CI ainsi que de fournir les informations pour une version avec"
" ``bloom ``. Le ``CMakeLists.txt`` contient les commandes pour construire et"
" empaqueter les exécutables et les bibliothèques et sera l'objet principal "
"de ce document."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:26
msgid "Basic project outline"
msgstr "Aperçu du projet de base"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:28
msgid ""
"The basic outline of the ``CMakeLists.txt`` of an ament package contains:"
msgstr "Le schéma de base du ``CMakeLists.txt`` d'un package ament contient :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:37
msgid ""
"The argument to ``project`` will be the package name and must be identical "
"to the package name in the ``package.xml``."
msgstr ""
"L'argument de ``project`` sera le nom du package et doit être identique au "
"nom du package dans ``package.xml``."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:39
msgid ""
"The project setup is done by ``ament_package()`` and this call must occur "
"exactly once per package. ``ament_package()`` installs the ``package.xml``, "
"registers the package with the ament index, and installs config (and "
"possibly target) files for CMake so that it can be found by other packages "
"using ``find_package``. Since ``ament_package()`` gathers a lot of "
"information from the ``CMakeLists.txt`` it should be the last call in your "
"``CMakeLists.txt``. Although it is possible to follow calls to "
"``ament_package()`` by calls to ``install`` functions copying files and "
"directories, it is simpler to just keep ``ament_package()`` the last call."
msgstr ""
"La configuration du projet est effectuée par ``ament_package()`` et cet "
"appel doit se produire exactement une fois par package. ``ament_package()`` "
"installe le ``package.xml``, enregistre le paquet avec l'index ament et "
"installe les fichiers de configuration (et éventuellement cible) pour CMake "
"afin qu'il puisse être trouvé par d'autres paquets en utilisant "
"``find_package` `. Étant donné que ``ament_package()`` rassemble beaucoup "
"d'informations à partir de ``CMakeLists.txt``, il devrait être le dernier "
"appel dans votre ``CMakeLists.txt``. Bien qu'il soit possible de suivre les "
"appels à ``ament_package()`` par des appels aux fonctions ``install`` "
"copiant fichiers et répertoires, il est plus simple de garder "
"``ament_package()`` le dernier appel."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:44
msgid "``ament_package`` can be given additional arguments:"
msgstr "``ament_package`` peut recevoir des arguments supplémentaires :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:46
msgid ""
"``CONFIG_EXTRAS``: a list of CMake files (``.cmake`` or ``.cmake.in`` "
"templates expanded by ``configure_file()``) which should be available to "
"clients of the package. For an example of when to use these arguments, see "
"the discussion in `Adding resources`_. For more information on how to use "
"template files, see `the official documentation "
"<https://cmake.org/cmake/help/v3.5/command/configure_file.html>`__."
msgstr ""
"``CONFIG_EXTRAS`` : une liste de fichiers CMake (modèles ``.cmake`` ou "
"``.cmake.in`` développés par ``configure_file()``) qui devraient être "
"disponibles pour les clients du paquet. Pour un exemple d'utilisation de ces"
" arguments, consultez la discussion dans `Ajout de ressources`_. Pour plus "
"d'informations sur l'utilisation des fichiers modèles, consultez `la "
"documentation officielle "
"<https://cmake.org/cmake/help/v3.5/command/configure_file.html>`__."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:50
msgid ""
"``CONFIG_EXTRAS_POST``: same as ``CONFIG_EXTRAS``, but the order in which "
"the files are added differs. While ``CONFIG_EXTRAS`` files are included "
"before the files generated for the ``ament_export_*`` calls the files from "
"``CONFIG_EXTRAS_POST`` are included afterwards."
msgstr ""
"``CONFIG_EXTRAS_POST`` : identique à ``CONFIG_EXTRAS``, mais l'ordre dans "
"lequel les fichiers sont ajoutés diffère. Alors que les fichiers "
"``CONFIG_EXTRAS`` sont inclus avant les fichiers générés pour les appels "
"``ament_export_*``, les fichiers de ``CONFIG_EXTRAS_POST`` sont inclus "
"après."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:53
msgid ""
"Instead of adding to ``ament_package``, you can also add to the variable "
"``${PROJECT_NAME}_CONFIG_EXTRAS`` and ``${PROJECT_NAME}_CONFIG_EXTRAS_POST``"
" with the same effect. The only difference is again the order in which the "
"files are added with the following total order:"
msgstr ""
"Au lieu d'ajouter à ``ament_package``, vous pouvez également ajouter à la "
"variable ``${PROJECT_NAME}_CONFIG_EXTRAS`` et "
"``${PROJECT_NAME}_CONFIG_EXTRAS_POST`` avec le même effet. La seule "
"différence est encore une fois l'ordre dans lequel les fichiers sont ajoutés"
" avec l'ordre total suivant :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:56
msgid "files added by ``CONFIG_EXTRAS``"
msgstr "fichiers ajoutés par ``CONFIG_EXTRAS``"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:58
msgid "files added by appending to ``${PROJECT_NAME}_CONFIG_EXTRAS``"
msgstr "fichiers ajoutés en ajoutant à ``${PROJECT_NAME}_CONFIG_EXTRAS``"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:60
msgid "files added by appending to ``${PROJECT_NAME}_CONFIG_EXTRAS_POST``"
msgstr "fichiers ajoutés en ajoutant à ``${PROJECT_NAME}_CONFIG_EXTRAS_POST``"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:62
msgid "files added by ``CONFIG_EXTRAS_POST``"
msgstr "fichiers ajoutés par ``CONFIG_EXTRAS_POST``"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:65
msgid "Adding files and headers"
msgstr "Ajout de fichiers et d'en-têtes"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:67
msgid ""
"There are two main targets to build: libraries and executables which are "
"built by ``add_library`` and ``add_executable`` respectively."
msgstr ""
"Il y a deux cibles principales à construire : les bibliothèques et les "
"exécutables qui sont respectivement construits par ``add_library`` et "
"``add_executable``."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:69
msgid ""
"With the separation of header files and implementation in C/C++, it is not "
"always necessary to add both files as argument to ``add_library``/ "
"``add_executable``."
msgstr ""
"Avec la séparation des fichiers d'en-tête et de l'implémentation en C/C++, "
"il n'est pas toujours nécessaire d'ajouter les deux fichiers comme argument "
"à ``add_library``/``add_executable``."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:71
msgid "The following best practice is proposed:"
msgstr "La meilleure pratique suivante est proposée :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:73
msgid ""
"if you are building a library, put all headers which should be usable by "
"clients and therefore must be installed into a subdirectory of the "
"``include`` folder named like the package, while all other files "
"(``.c/.cpp`` and header files which should not be exported) are inside the "
"``src`` folder."
msgstr ""
"si vous construisez une bibliothèque, placez tous les en-têtes qui doivent "
"être utilisables par les clients et doivent donc être installés dans un "
"sous-répertoire du dossier ``include`` nommé comme le paquet, tandis que "
"tous les autres fichiers (``.c/.cpp` ` et les fichiers d'en-tête qui ne "
"doivent pas être exportés) se trouvent dans le dossier ``src``."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:75
msgid ""
"only cpp files are explicitly referenced in the call to ``add_library`` or "
"``add_executable``"
msgstr ""
"seuls les fichiers cpp sont explicitement référencés dans l'appel à "
"``add_library`` ou ``add_executable``"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:77
msgid "allow to find headers via"
msgstr "permettre de trouver des en-têtes via"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:86
msgid ""
"This adds all files in the folder ``${CMAKE_CURRENT_SOURCE_DIR}/include`` to"
" the public interface during build time and all files in the include folder "
"(relative to ``${CMAKE_INSTALL_DIR}``) when being installed."
msgstr ""
"Cela ajoute tous les fichiers du dossier "
"``${CMAKE_CURRENT_SOURCE_DIR}/include`` à l'interface publique pendant la "
"construction et tous les fichiers du dossier d'inclusion (par rapport à "
"``${CMAKE_INSTALL_DIR}``) lors de l'installation."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:88
msgid ""
"In principle, using generator expressions here is not necessary if both "
"folders are called ``include`` and top-level with respect to "
"``${CMAKE_CURRENT_SOURCE_DIR}`` and ``${CMAKE_INSTALL_DIR}``, but it is very"
" common."
msgstr ""
"En principe, l'utilisation d'expressions de générateur ici n'est pas "
"nécessaire si les deux dossiers sont appelés ``include`` et de niveau "
"supérieur par rapport à ``${CMAKE_CURRENT_SOURCE_DIR}`` et "
"``${CMAKE_INSTALL_DIR}``, mais c'est très courant ."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:91
msgid "Adding Dependencies"
msgstr "Ajout de dépendances"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:93
msgid "There are two ways to link your packages against a new dependency."
msgstr "Il existe deux façons de lier vos packages à une nouvelle dépendance."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:95
msgid ""
"The first and recommended way is to use the ament macro "
"``ament_target_dependencies``. As an example, suppose we want to link "
"``my_target`` against the linear algebra library Eigen3."
msgstr ""
"La première méthode recommandée consiste à utiliser la macro ament "
"``ament_target_dependencies``. Par exemple, supposons que nous voulions lier"
" ``my_target`` à la bibliothèque d'algèbre linéaire Eigen3."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:103
msgid ""
"It includes the necessary headers and libraries and their dependencies to be"
" correctly found by the project. It will also ensure that the include "
"directories of all dependencies are ordered correctly when using overlay "
"workspaces."
msgstr ""
"Il comprend les en-têtes et bibliothèques nécessaires et leurs dépendances "
"pour être correctement trouvés par le projet. Cela garantira également que "
"les répertoires d'inclusion de toutes les dépendances sont correctement "
"ordonnés lors de l'utilisation d'espaces de travail superposés."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:106
msgid "The second way is to use ``target_link_libraries``."
msgstr "La deuxième façon est d'utiliser ``target_link_libraries``."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:108
msgid ""
"The recommended way in modern CMake is to only use targets, exporting and "
"linking against them. CMake targets are namespaced, similar to C++. For "
"instance, ``Eigen3`` defines the target ``Eigen3::Eigen``."
msgstr ""
"La méthode recommandée dans CMake moderne consiste à n'utiliser que des "
"cibles, à les exporter et à les lier. Les cibles CMake ont un espace de "
"noms, similaire à C++. Par exemple, ``Eigen3`` définit la cible "
"``Eigen3::Eigen``."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:112
msgid ""
"At least until ``Crystal Clemmys`` target names are not supported in the "
"``ament_target_dependencies`` macro. Sometimes it will be necessary to call "
"the ``target_link_libaries`` CMake function. In the example of Eigen3, the "
"call should then look like"
msgstr ""
"Au moins jusqu'à ce que les noms de cible ``Crystal Clemmys`` ne soient pas "
"pris en charge dans la macro ``ament_target_dependencies``. Parfois, il sera"
" nécessaire d'appeler la fonction CMake ``target_link_libaries``. Dans "
"l'exemple de Eigen3, l'appel devrait alors ressembler à"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:121
msgid ""
"This will also include necessary headers, libraries and their dependencies, "
"but in contrast to ``ament_target_dependencies`` it might not correctly "
"order the dependencies when using overlay workspaces."
msgstr ""
"Cela inclura également les en-têtes nécessaires, les bibliothèques et leurs "
"dépendances, mais contrairement à ``ament_target_dependencies``, il se peut "
"que les dépendances ne soient pas correctement ordonnées lors de "
"l'utilisation d'espaces de travail superposés."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:125
msgid ""
"It should never be necessary to ``find_package`` a library that is not "
"explicitly needed but is a dependency of another dependency that is "
"explicitly needed. If that is the case, file a bug against the corresponding"
" package."
msgstr ""
"Il ne devrait jamais être nécessaire de ``find_package`` une bibliothèque "
"qui n'est pas explicitement nécessaire mais qui est une dépendance d'une "
"autre dépendance qui est explicitement nécessaire. Si tel est le cas, "
"signalez un bogue sur le paquet correspondant."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:129
msgid "Building a Library"
msgstr "Construire une bibliothèque"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:131
msgid ""
"When building a reusable library, some information needs to be exported for "
"downstream packages to easily use it."
msgstr ""
"Lors de la création d'une bibliothèque réutilisable, certaines informations "
"doivent être exportées pour que les packages en aval puissent les utiliser "
"facilement."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:153
msgid ""
"Here, we assume that the folder ``include`` contains the headers which need "
"to be exported. Note that it is not necessary to put all headers into a "
"separate folder, only those that should be included by clients."
msgstr ""
"Ici, nous supposons que le dossier ``include`` contient les en-têtes qui "
"doivent être exportés. Notez qu'il n'est pas nécessaire de placer tous les "
"en-têtes dans un dossier séparé, uniquement ceux qui doivent être inclus par"
" les clients."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:156
msgid "Here is what's happening in the snippet above:"
msgstr "Voici ce qui se passe dans l'extrait ci-dessus :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:158
msgid ""
"The ``ament_export_targets`` macro exports the targets for CMake. This is "
"necessary to allow your library's clients to use the "
"``target_link_libraries(client my_library::my_library)`` syntax. "
"``ament_export_targets`` can take an arbitrary list of targets named as "
"``EXPORT`` in an install call and an additional option "
"``HAS_LIBRARY_TARGET``, which adds potential libraries to environment "
"variables."
msgstr ""
"La macro ``ament_export_targets`` exporte les cibles pour CMake. Ceci est "
"nécessaire pour permettre aux clients de votre bibliothèque d'utiliser la "
"syntaxe ``target_link_libraries(client my_library::my_library)``. "
"``ament_export_targets`` peut prendre une liste arbitraire de cibles nommées"
" ``EXPORT`` dans un appel d'installation et une option supplémentaire "
"``HAS_LIBRARY_TARGET``, qui ajoute des bibliothèques potentielles aux "
"variables d'environnement."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:162
msgid ""
"The ``ament_export_dependencies`` exports dependencies to downstream "
"packages. This is necessary so that the user of the library does not have to"
" call ``find_package`` for those dependencies, too."
msgstr ""
"Le ``ament_export_dependencies`` exporte les dépendances vers les packages "
"en aval. Ceci est nécessaire pour que l'utilisateur de la bibliothèque n'ait"
" pas à appeler ``find_package`` pour ces dépendances également."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:165
msgid ""
"The first ``install`` commands installs the header files which should be "
"available to clients."
msgstr ""
"La première commande ``install`` installe les fichiers d'en-tête qui "
"devraient être disponibles pour les clients."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:169
msgid ""
"Calling ``ament_export_targets``, ``ament_export_dependencies``, or other "
"ament commands from a CMake subdirectory will not work as expected. This is "
"because the CMake subdirectory has no way of setting necessary variables in "
"the parent scope where ``ament_package`` is called."
msgstr ""
"L'appel de ``ament_export_targets``, ``ament_export_dependencies`` ou "
"d'autres commandes ament à partir d'un sous-répertoire CMake ne fonctionnera"
" pas comme prévu. C'est parce que le sous-répertoire CMake n'a aucun moyen "
"de définir les variables nécessaires dans la portée parent où "
"``ament_package`` est appelé."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:172
msgid ""
"The last large install command installs the library. Archive and library "
"files will be exported to the lib folder, runtime binaries will be installed"
" to the bin folder and the path to installed headers is ``include``."
msgstr ""
"La dernière grande commande d'installation installe la bibliothèque. Les "
"fichiers d'archive et de bibliothèque seront exportés vers le dossier lib, "
"les binaires d'exécution seront installés dans le dossier bin et le chemin "
"vers les en-têtes installés est ``include``."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:177
msgid ""
"Windows DLLs are treated as runtime artifacts and installed into the "
"``RUNTIME DESTINATION`` folder. It is therefore advised to not leave out the"
" ``RUNTIME`` install even when developing libraries on Unix based systems."
msgstr ""
"Les DLL Windows sont traitées comme des artefacts d'exécution et installées "
"dans le dossier ``RUNTIME DESTINATION``. Il est donc conseillé de ne pas "
"omettre l'installation ``RUNTIME`` même lors du développement de "
"bibliothèques sur des systèmes basés sur Unix."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:180
msgid ""
"Regarding the ``include directory``, the install command only adds "
"information to CMake, it does not actually install the includes folder. This"
" is done by copying the headers via ``install(DIRECTORY <dir> DESTINATION "
"<dest>)`` as described above."
msgstr ""
"En ce qui concerne le ``include directory``, la commande d'installation "
"ajoute uniquement des informations à CMake, elle n'installe pas réellement "
"le dossier includes. Ceci est fait en copiant les en-têtes via "
"``install(DIRECTORY <dir> DESTINATION <dest>)`` comme décrit ci-dessus."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:183
msgid ""
"The ``EXPORT`` notation of the install call requires additional attention: "
"It installs the CMake files for the ``my_library`` target. It is named "
"exactly like the argument in ``ament_export_targets`` and could be named "
"like the library. However, this will then prohibit using the "
"``ament_target_dependencies`` way of including your library. To allow for "
"full flexibility, it is advised to prepend the export target with something "
"like ``<target>Targets``."
msgstr ""
"La notation ``EXPORT`` de l'appel d'installation nécessite une attention "
"supplémentaire : elle installe les fichiers CMake pour la cible "
"``my_library``. Il est nommé exactement comme l'argument dans "
"``ament_export_targets`` et pourrait être nommé comme la bibliothèque. "
"Cependant, cela empêchera alors d'utiliser la méthode "
"``ament_target_dependencies`` pour inclure votre bibliothèque. Pour "
"permettre une flexibilité totale, il est conseillé de faire précéder la "
"cible d'exportation avec quelque chose comme ``<target>Targets``."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:189
msgid ""
"All install paths are relative to ``CMAKE_INSTALL_PREFIX``, which is already"
" set correctly by colcon/ament"
msgstr ""
"Tous les chemins d'installation sont relatifs à ``CMAKE_INSTALL_PREFIX``, "
"qui est déjà défini correctement par colcon/ament"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:191
msgid ""
"There are two additional functions which can be used but are superfluous for"
" target based installs:"
msgstr ""
"Deux fonctions supplémentaires peuvent être utilisées mais sont superflues "
"pour les installations basées sur la cible :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:198
msgid ""
"The first macro marks the directory of the exported include directories "
"(this is achieved by ``INCLUDES DESTINATION`` in the target ``install`` "
"call). The second macro marks the location of the installed library (this is"
" done by the ``HAS_LIBRARY_TARGET`` argument in the call to "
"``ament_export_targets``)."
msgstr ""
"La première macro marque le répertoire des répertoires d'inclusion exportés "
"(ceci est réalisé par ``INCLUDES DESTINATION`` dans l'appel cible "
"``install``). La deuxième macro marque l'emplacement de la bibliothèque "
"installée (ceci est fait par l'argument ``HAS_LIBRARY_TARGET`` dans l'appel "
"à ``ament_export_targets``)."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:201
msgid ""
"Some of the macros can take different types of arguments for non-target "
"exports, but since the recommended way for modern Make is to use targets, we"
" will not cover them here. Documentation of these options can be found in "
"the source code itself."
msgstr ""
"Certaines des macros peuvent prendre différents types d'arguments pour les "
"exportations non ciblées, mais comme la méthode recommandée pour Make "
"moderne consiste à utiliser des cibles, nous ne les aborderons pas ici. La "
"documentation de ces options se trouve dans le code source lui-même."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:205
msgid "Compiler and linker options"
msgstr "Options du compilateur et de l'éditeur de liens"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:207
msgid ""
"ROS 2 targets compilers which comply with the C++14 and C99 standard until "
"at least ``Crystal Clemmys``. Newer versions might be targeted in the future"
" and are referenced `here <https://www.ros.org/reps/rep-2000.html>`__. "
"Therefore it is customary to set the corresponding CMake flags:"
msgstr ""
"ROS 2 cible les compilateurs qui respectent les standards C++14 et C99 "
"jusqu'au moins ``Crystal Clemmys``. Des versions plus récentes pourraient "
"être ciblées à l'avenir et sont référencées `ici "
"<https://www.ros.org/reps/rep-2000.html>`__. Par conséquent, il est d'usage "
"de définir les drapeaux CMake correspondants :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:220
msgid ""
"To keep the code clean, compilers should throw warnings for questionable "
"code and these warnings should be fixed."
msgstr ""
"Pour garder le code propre, les compilateurs doivent lancer des "
"avertissements pour le code douteux et ces avertissements doivent être "
"corrigés."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:222
msgid "It is recommended to at least cover the following warning levels:"
msgstr ""
"Il est recommandé de couvrir au moins les niveaux d'avertissement suivants :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:224
msgid "For Visual Studio, the default ``W1`` warnings are kept"
msgstr ""
"Pour Visual Studio, les avertissements ``W1`` par défaut sont conservés"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:226
msgid ""
"For GCC and Clang: ``-Wall -Wextra -Wpedantic`` are required and ``-Wshadow "
"-Werror`` are advisable (the latter makes warnings errors)."
msgstr ""
"Pour GCC et Clang : ``-Wall -Wextra -Wpedantic`` sont requis et ``-Wshadow "
"-Werror`` sont conseillés (ce dernier fait des erreurs d'avertissement)."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:228
msgid ""
"Although modern CMake advises to add compiler flags on a target basis, i.e. "
"call"
msgstr ""
"Bien que CMake moderne conseille d'ajouter des indicateurs de compilateur "
"sur une base cible, c'est-à-dire d'appeler"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:234
msgid ""
"it is at the moment recommended to use the directory level function "
"``add_compile_options(-Wall)`` to not clutter the code with target-based "
"compile options for all executables and tests."
msgstr ""
"il est actuellement recommandé d'utiliser la fonction au niveau du "
"répertoire ``add_compile_options(-Wall)`` pour ne pas encombrer le code avec"
" des options de compilation basées sur la cible pour tous les exécutables et"
" les tests."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:237
msgid "Building libraries on Windows"
msgstr "Créer des bibliothèques sous Windows"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:239
msgid ""
"Since Linux, Mac and Windows are all officially supported platforms, to have"
" maximum impact any package should also build on Windows. The Windows "
"library format enforces symbol visibility: Every symbol which should be used"
" from a client has to be explicitly exported by the library (and data "
"symbols need to be implicitly imported)."
msgstr ""
"Étant donné que Linux, Mac et Windows sont tous des plates-formes "
"officiellement prises en charge, pour avoir un impact maximal, tout package "
"doit également être construit sur Windows. Le format de bibliothèque Windows"
" applique la visibilité des symboles : chaque symbole qui doit être utilisé "
"à partir d'un client doit être explicitement exporté par la bibliothèque (et"
" les symboles de données doivent être implicitement importés)."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:243
msgid ""
"To keep this compatible with Clang and GCC builds, it is advised to use the "
"logic in `the GCC wiki <https://gcc.gnu.org/wiki/Visibility>`__. To use it "
"for a package called ``my_library``:"
msgstr ""
"Pour que cela reste compatible avec les builds Clang et GCC, il est "
"conseillé d'utiliser la logique du `wiki GCC "
"<https://gcc.gnu.org/wiki/Visibility>`__. Pour l'utiliser pour un paquet "
"appelé ``my_library`` :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:246
msgid ""
"Copy the logic in the link into a header file called "
"``visibility_control.hpp``."
msgstr ""
"Copiez la logique du lien dans un fichier d'en-tête appelé "
"``visibility_control.hpp``."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:248
msgid ""
"Replace ``DLL`` by ``MY_LIBRARY`` (for an example, see visibility control of"
" `rviz_rendering "
"<https://github.com/ros2/rviz/blob/ros2/rviz_rendering/include/rviz_rendering/visibility_control.hpp>`__)."
msgstr ""
"Remplacez ``DLL`` par ``MY_LIBRARY`` (pour un exemple, voir le contrôle de "
"visibilité de `rviz_rendering "
"<https://github.com/ros2/rviz/blob/ros2/rviz_rendering/include/rviz_rendering/visibility_control.hpp>"
" `__)."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:250
msgid ""
"Use the macros \"MY_LIBRARY_PUBLIC\" for all symbols you need to export "
"(i.e. classes or functions)."
msgstr ""
"Utilisez les macros \"MY_LIBRARY_PUBLIC\" pour tous les symboles que vous "
"devez exporter (c'est-à-dire les classes ou les fonctions)."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:252
msgid "In the project ``CMakeLists.txt`` use:"
msgstr "Dans le projet ``CMakeLists.txt`` utilisez :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:258
msgid ""
"For more details, see :ref:`Windows Symbol Visibility in the Windows Tips "
"and Tricks document <Windows_Symbol_Visibility>`."
msgstr ""
"Pour plus de détails, voir :ref:`Visibilité des symboles Windows dans le "
"document Trucs et astuces Windows <Windows_Symbol_Visibility>`."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:261
msgid "Testing and Linting"
msgstr "Test et peluchage"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:263
msgid ""
"In order to separate testing from building the library with colcon, wrap all"
" calls to linters and tests in a conditional:"
msgstr ""
"Afin de séparer les tests de la construction de la bibliothèque avec colcon,"
" encapsulez tous les appels aux linters et aux tests dans une condition :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:273
msgid "Linting"
msgstr "peluchage"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:275
msgid ""
"It's advised to use the combined call from `ament_lint_auto "
"<https://github.com/ament/ament_lint/blob/rolling/ament_lint_auto/doc/index.rst#ament_lint_auto>`_:"
msgstr ""
"Il est conseillé d'utiliser l'appel combiné de `ament_lint_auto "
"<https://github.com/ament/ament_lint/blob/rolling/ament_lint_auto/doc/index.rst#ament_lint_auto>`_ :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:282
msgid ""
"This will run linters as defined in the ``package.xml``. It is recommended "
"to use the set of linters defined by the package ``ament_lint_common``. The "
"individual linters included there, as well as their functions, can be seen "
"in the `ament_lint_common docs "
"<https://github.com/ament/ament_lint/blob/rolling/ament_lint_common/doc/index.rst>`_."
msgstr ""
"Cela exécutera les linters comme défini dans le ``package.xml``. Il est "
"recommandé d'utiliser l'ensemble de linters défini par le package "
"``ament_lint_common``. Les linters individuels qui y sont inclus, ainsi que "
"leurs fonctions, peuvent être vus dans les `ament_lint_common docs "
"<https://github.com/ament/ament_lint/blob/rolling/ament_lint_common/doc/index.rst>`_."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:286
msgid ""
"Linters provided by ament can also be added separately, instead of running "
"``ament_lint_auto``. One example of how to do so can be found in the "
"`ament_cmake_lint_cmake documentation "
"<https://github.com/ament/ament_lint/blob/rolling/ament_cmake_lint_cmake/doc/index.rst>`_."
msgstr ""
"Les linters fournis par ament peuvent également être ajoutés séparément, au "
"lieu d'exécuter ``ament_lint_auto``. Un exemple de la façon de procéder peut"
" être trouvé dans la documentation `ament_cmake_lint_cmake "
"<https://github.com/ament/ament_lint/blob/rolling/ament_cmake_lint_cmake/doc/index.rst>`_."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:290
msgid "Testing"
msgstr "Essai"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:292
msgid "Ament contains CMake macros to simplify setting up GTests. Call:"
msgstr ""
"Ament contient des macros CMake pour simplifier la configuration des GTests."
" Appel:"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:299
msgid ""
"to add a GTest. This is then a regular target which can be linked against "
"other libraries (such as the project library). The macros have additional "
"parameters:"
msgstr ""
"pour ajouter un GTest. Il s'agit alors d'une cible régulière qui peut être "
"liée à d'autres bibliothèques (comme la bibliothèque du projet). Les macros "
"ont des paramètres supplémentaires :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:303
msgid ""
"``APPEND_ENV``: append environment variables. For instance you can add to "
"the ament prefix path by calling:"
msgstr ""
"``APPEND_ENV`` : ajoute des variables d'environnement. Par exemple, vous "
"pouvez ajouter au chemin du préfixe ament en appelant :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:312
msgid ""
"``APPEND_LIBRARY_DIRS``: append libraries so that they can be found by the "
"linker at runtime. This can be achieved by setting environment variables "
"like ``PATH`` on Windows and ``LD_LIBRARY_PATH`` on Linux, but this makes "
"the call platform specific."
msgstr ""
"``APPEND_LIBRARY_DIRS`` : ajoute des bibliothèques afin qu'elles puissent "
"être trouvées par l'éditeur de liens lors de l'exécution. Cela peut être "
"réalisé en définissant des variables d'environnement telles que ``PATH`` "
"sous Windows et ``LD_LIBRARY_PATH`` sous Linux, mais cela rend la plate-"
"forme d'appel spécifique."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:315
msgid "``ENV``: set environment variables (same syntax as ``APPEND_ENV``)."
msgstr ""
"``ENV`` : définit les variables d'environnement (même syntaxe que "
"``APPEND_ENV``)."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:317
msgid ""
"``TIMEOUT``: set a test timeout in second. The default for GTests is 60 "
"seconds.  For example:"
msgstr ""
"``TIMEOUT`` : définissez un délai de test en secondes. La valeur par défaut "
"pour les GTests est de 60 secondes. Par example:"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:323
msgid ""
"``SKIP_TEST``: skip this test (will be shown as \"passed\" in the console "
"output)."
msgstr ""
"``SKIP_TEST`` : saute ce test (sera affiché comme \"réussi\" dans la sortie "
"de la console)."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:325
msgid "``SKIP_LINKING_MAIN_LIBRARIES``: Don't link against GTest."
msgstr "``SKIP_LINKING_MAIN_LIBRARIES`` : ne pas lier avec GTest."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:327
msgid "``WORKING_DIRECTORY``: set the working directory for the test."
msgstr ""
"``WORKING_DIRECTORY`` : définit le répertoire de travail pour le test."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:329
msgid ""
"The default working directory otherwise is the ``CMAKE_CURRENT_BINARY_DIR``,"
" which is described in the `CMake documentation "
"<https://cmake.org/cmake/help/latest/variable/CMAKE_CURRENT_BINARY_DIR.html>`_."
msgstr ""
"Sinon, le répertoire de travail par défaut est le "
"``CMAKE_CURRENT_BINARY_DIR``, qui est décrit dans la `documentation CMake "
"<https://cmake.org/cmake/help/latest/variable/CMAKE_CURRENT_BINARY_DIR.html>`_."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:331
msgid "Similarly, there is a CMake macro to set up GTest including GMock:"
msgstr ""
"De même, il existe une macro CMake pour configurer GTest incluant GMock :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:338
msgid "It has the same additional parameters as ``ament_add_gtest``."
msgstr "Il a les mêmes paramètres supplémentaires que ``ament_add_gtest``."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:341
msgid "Extending ament"
msgstr "Ament d'extension"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:343
msgid ""
"It is possible to register additional macros/functions with ``ament_cmake`` "
"and extend it in several ways."
msgstr ""
"Il est possible d'enregistrer des macros/fonctions supplémentaires avec "
"``ament_cmake`` et de l'étendre de plusieurs manières."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:346
msgid "Adding a function/macro to ament"
msgstr "Ajouter une fonction/macro à ament"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:348
msgid ""
"Extending ament will often times mean that you want to have some functions "
"available to other packages. The best way to provide the macro to client "
"packages is to register it with ament."
msgstr ""
"L'extension de ament signifie souvent que vous souhaitez que certaines "
"fonctions soient disponibles pour d'autres packages. La meilleure façon de "
"fournir la macro aux packages clients est de l'enregistrer avec ament."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:351
msgid ""
"This can be done by appending the ``${PROJECT_NAME}_CONFIG_EXTRAS`` "
"variable, which is used by ``ament_package()`` via"
msgstr ""
"Cela peut être fait en ajoutant la variable "
"``${PROJECT_NAME}_CONFIG_EXTRAS``, qui est utilisée par ``ament_package()`` "
"via"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:360
msgid ""
"Alternatively, you can directly add the files to the ``ament_package()`` "
"call:"
msgstr ""
"Alternativement, vous pouvez directement ajouter les fichiers à l'appel "
"``ament_package()`` :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:370
msgid "Adding to extension points"
msgstr "Ajout aux points d'extension"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:372
msgid ""
"In addition to simple files with functions that can be used in other "
"packages, you can also add extensions to ament. Those extensions are scripts"
" which are executed with the function which defines the extension point. The"
" most common use-case for ament extensions is probably registering rosidl "
"message generators: When writing a generator, you normally want to generate "
"all messages and services with your generator also without modifying the "
"code for the message/service definition packages. This is possible by "
"registering the generator as an extension to ``rosidl_generate_interfaces``."
msgstr ""
"En plus des fichiers simples avec des fonctions pouvant être utilisées dans "
"d'autres packages, vous pouvez également ajouter des extensions à ament. Ces"
" extensions sont des scripts qui sont exécutés avec la fonction qui définit "
"le point d'extension. Le cas d'utilisation le plus courant pour les "
"extensions ament est probablement l'enregistrement des générateurs de "
"messages rosidl : lors de l'écriture d'un générateur, vous souhaitez "
"normalement générer tous les messages et services avec votre générateur "
"également sans modifier le code des packages de définition de "
"message/service. Ceci est possible en enregistrant le générateur en tant "
"qu'extension de ``rosidl_generate_interfaces``."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:378
msgid "As an example, see"
msgstr "A titre d'exemple, voir"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:387
msgid ""
"which registers the macro ``rosidl_generator_cpp_generate_interfaces.cmake``"
" for the package ``rosidl_generator_cpp`` to the extension point "
"``rosidl_generate_interfaces``. When the extension point gets executed, this"
" will trigger the execution of the script "
"``rosidl_generator_cpp_generate_interfaces.cmake`` here. In particular, this"
" will call the generator whenever the function "
"``rosidl_generate_interfaces`` gets executed."
msgstr ""
"qui enregistre la macro ``rosidl_generator_cpp_generate_interfaces.cmake`` "
"pour le package ``rosidl_generator_cpp`` au point d'extension "
"``rosidl_generate_interfaces``. Lorsque le point d'extension est exécuté, "
"cela déclenchera l'exécution du script "
"``rosidl_generator_cpp_generate_interfaces.cmake`` ici. En particulier, cela"
" appellera le générateur chaque fois que la fonction "
"``rosidl_generate_interfaces`` sera exécutée."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:391
msgid ""
"The most important extension point for generators, aside from "
"``rosidl_generate_interfaces``, is ``ament_package``, which will simply "
"execute scripts with the ``ament_package()`` call. This extension point is "
"useful when registering resources (see below)."
msgstr ""
"Le point d'extension le plus important pour les générateurs, mis à part "
"``rosidl_generate_interfaces``, est ``ament_package``, qui exécutera "
"simplement des scripts avec l'appel ``ament_package()``. Ce point "
"d'extension est utile lors de l'enregistrement des ressources (voir ci-"
"dessous)."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:394
msgid ""
"``ament_register_extension`` is a function which takes exactly three "
"arguments:"
msgstr ""
"``ament_register_extension`` est une fonction qui prend exactement trois "
"arguments :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:396
msgid ""
"``extension_point``: The name of the extension point (most of the time this "
"will be one of ``ament_package`` or ``rosidl_generate_interfaces``)"
msgstr ""
"``extension_point`` : le nom du point d'extension (la plupart du temps, ce "
"sera l'un des ``ament_package`` ou ``rosidl_generate_interfaces``)"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:398
msgid ""
"``package_name``: The name of the package containing the CMake file (i.e. "
"the project name of the project where the file is written to)"
msgstr ""
"``package_name`` : le nom du package contenant le fichier CMake (c'est-à-"
"dire le nom du projet dans lequel le fichier est écrit)"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:400
msgid ""
"``cmake_filename``: The CMake file executed when the extension point is run"
msgstr ""
"``cmake_filename`` : le fichier CMake exécuté lorsque le point d'extension "
"est exécuté"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:404
msgid ""
"It is possible to define custom extension points in a similar manner to "
"``ament_package`` and ``rosidl_generate_interfaces``, but this should hardly"
" be necessary."
msgstr ""
"Il est possible de définir des points d'extension personnalisés de la même "
"manière que ``ament_package`` et ``rosidl_generate_interfaces``, mais cela "
"ne devrait pas être nécessaire."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:407
msgid "Adding extension points"
msgstr "Ajout de points d'extension"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:409
msgid ""
"Very rarely, it might be interesting to define a new extension point to "
"ament."
msgstr ""
"Très rarement, il peut être intéressant de définir un nouveau point "
"d'extension à ament."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:411
msgid ""
"Extension points can be registered within a macro so that all extensions "
"will be executed when the corresponding macro is called. To do so:"
msgstr ""
"Les points d'extension peuvent être enregistrés dans une macro afin que "
"toutes les extensions soient exécutées lorsque la macro correspondante est "
"appelée. Faire cela:"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:414
msgid ""
"Define and document a name for your extension (e.g. ``my_extension_point``),"
" which is the name passed to the ``ament_register_extension`` macro when "
"using the extension point."
msgstr ""
"Définissez et documentez un nom pour votre extension (par exemple "
"``my_extension_point``), qui est le nom passé à la macro "
"``ament_register_extension`` lors de l'utilisation du point d'extension."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:416
msgid "In the macro/function which should execute the extensions call:"
msgstr "Dans la macro/fonction qui doit exécuter l'appel des extensions :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:422
msgid ""
"Ament extensions work by defining a variable containing the name of the "
"extension point and filling it with the macros to be executed. Upon calling "
"``ament_execute_extensions``, the scripts defined in the variable are then "
"executed one after another."
msgstr ""
"Les extensions Ament fonctionnent en définissant une variable contenant le "
"nom du point d'extension et en la remplissant avec les macros à exécuter. "
"Lors de l'appel de ``ament_execute_extensions``, les scripts définis dans la"
" variable sont alors exécutés les uns après les autres."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:426
msgid "Adding resources"
msgstr "Ajout de ressources"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:428
msgid ""
"Especially when developing plugins or packages which allow plugins it is "
"often essential to add resources to one ROS package from another (e.g. a "
"plugin). Examples can be plugins for tools using the pluginlib."
msgstr ""
"Surtout lors du développement de plugins ou de packages qui autorisent les "
"plugins, il est souvent essentiel d'ajouter des ressources à un package ROS "
"à partir d'un autre (par exemple, un plugin). Des exemples peuvent être des "
"plugins pour des outils utilisant pluginlib."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:431
msgid ""
"This can be achieved using the ament index (also called \"resource index\")."
msgstr ""
"Ceci peut être réalisé en utilisant l'indice d'ament (également appelé "
"\"indice de ressources\")."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:434
msgid "The ament index explained"
msgstr "L'indice d'ament expliqué"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:436
msgid ""
"For details on the design and intentions, see `here "
"<https://github.com/ament/ament_cmake/blob/rolling/ament_cmake_core/doc/resource_index.md>`__"
msgstr ""
"Pour plus de détails sur la conception et les intentions, voir `ici "
"<https://github.com/ament/ament_cmake/blob/rolling/ament_cmake_core/doc/resource_index.md>`__"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:438
msgid ""
"In principle, the ament index is contained in a folder within the "
"install/share folder of your package. It contains shallow subfolders named "
"after different types of resources. Within the subfolder, each package "
"providing said resource is referenced by name with a \"marker file\". The "
"file may contain whatever content necessary to obtain the resources, e.g. "
"relative paths to the installation directories of the resource, it may also "
"be simply empty."
msgstr ""
"En principe, l'index d'ament est contenu dans un dossier du dossier "
"install/share de votre package. Il contient des sous-dossiers superficiels "
"nommés d'après différents types de ressources. Au sein du sous-dossier, "
"chaque package fournissant ladite ressource est référencé par son nom avec "
"un \"fichier marqueur\". Le fichier peut contenir tout contenu nécessaire "
"pour obtenir les ressources, par ex. chemins relatifs vers les répertoires "
"d'installation de la ressource, il peut aussi être simplement vide."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:443
msgid ""
"To give an example, consider providing display plugins for RViz: When "
"providing RViz plugins in a project named ``my_rviz_displays`` which will be"
" read by the pluginlib, you will provide a ``plugin_description.xml`` file, "
"which will be installed and used by the pluginlib to load the plugins. To "
"achieve this, the plugin_description.xml is registered as a resource in the "
"resource_index via"
msgstr ""
"Pour donner un exemple, envisagez de fournir des plugins d'affichage pour "
"RViz : Lorsque vous fournissez des plugins RViz dans un projet nommé "
"``my_rviz_displays`` qui sera lu par le pluginlib, vous fournirez un fichier"
" ``plugin_description.xml``, qui sera installé et utilisé par le pluginlib "
"pour charger les plugins. Pour ce faire, le plugin_description.xml est "
"enregistré en tant que ressource dans le resource_index via"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:451
msgid ""
"When running ``colcon build``, this installs a file ``my_rviz_displays`` "
"into a subfolder ``rviz_common__pluginlib__plugin`` into the resource_index."
" Pluginlib factories within rviz_common will know to gather information from"
" all folders named ``rviz_common__pluginlib__plugin`` for packages that "
"export plugins. The marker file for pluginlib factories contains an install-"
"folder relative path to the ``plugins_description.xml`` file (and the name "
"of the library as marker file name). With this information, the pluginlib "
"can load the library and know which plugins to load from the "
"``plugin_description.xml`` file."
msgstr ""
"Lors de l'exécution de ``colcon build``, cela installe un fichier "
"``my_rviz_displays`` dans un sous-dossier ``rviz_common__pluginlib__plugin``"
" dans le resource_index. Les fabriques de plugins de rviz_common sauront "
"rassembler des informations à partir de tous les dossiers nommés "
"``rviz_common__pluginlib__plugin`` pour les packages qui exportent des "
"plugins. Le fichier marqueur pour les fabriques pluginlib contient un chemin"
" relatif du dossier d'installation vers le fichier "
"``plugins_description.xml`` (et le nom de la bibliothèque comme nom de "
"fichier marqueur). Avec ces informations, le pluginlib peut charger la "
"bibliothèque et savoir quels plugins charger à partir du fichier "
"``plugin_description.xml``."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:456
msgid ""
"As a second example, consider the possibility to let your own RViz plugins "
"use your own custom meshes. Meshes get loaded at startup time so that the "
"plugin owner does not have to deal with it, but this implies RViz has to "
"know about the meshes. To achieve this, RViz provides a function:"
msgstr ""
"Comme deuxième exemple, envisagez la possibilité de laisser vos propres "
"plugins RViz utiliser vos propres maillages personnalisés. Les maillages "
"sont chargés au démarrage afin que le propriétaire du plugin n'ait pas à "
"s'en occuper, mais cela implique que RViz doit connaître les maillages. Pour"
" cela, RViz propose une fonction :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:464
msgid ""
"This registers the directories as an ogre_media resource in the ament index."
" In short, it installs a file named after the project which calls the "
"function into a subfolder called ``rviz_ogre_media_exports``. The file "
"contains the install folder relative paths to the directories listed in the "
"macros. On startup time, RViz can now search for all folders called "
"``rviz_ogre_media_exports`` and load resources in all folders provided. "
"These searches are done using ``ament_index_cpp`` (or ``ament_index_py`` for"
" Python packages)."
msgstr ""
"Cela enregistre les répertoires en tant que ressource ogre_media dans "
"l'index ament. En bref, il installe un fichier nommé d'après le projet qui "
"appelle la fonction dans un sous-dossier appelé ``rviz_ogre_media_exports``."
" Le fichier contient les chemins relatifs du dossier d'installation vers les"
" répertoires répertoriés dans les macros. Au démarrage, RViz peut désormais "
"rechercher tous les dossiers appelés ``rviz_ogre_media_exports`` et charger "
"les ressources dans tous les dossiers fournis. Ces recherches sont "
"effectuées à l'aide de ``ament_index_cpp`` (ou ``ament_index_py`` pour les "
"packages Python)."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:470
msgid ""
"In the following sections we will explore how to add your own resources to "
"the ament index and provide best practices for doing so."
msgstr ""
"Dans les sections suivantes, nous explorerons comment ajouter vos propres "
"ressources à l'index d'ament et fournirons les meilleures pratiques pour le "
"faire."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:473
msgid "Querying the ament index"
msgstr "Interrogation de l'index d'ament"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:475
msgid ""
"If necessary, it is possible to query the ament index for resources via "
"CMake. To do so, there are three functions:"
msgstr ""
"Si nécessaire, il est possible d'interroger l'index d'ament pour les "
"ressources via CMake. Pour cela, trois fonctions :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:478
msgid ""
"``ament_index_has_resource``: obtain a prefix path to the resource if it "
"exists with the following parameters:"
msgstr ""
"``ament_index_has_resource`` : obtenez un chemin de préfixe vers la "
"ressource si elle existe avec les paramètres suivants :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:480
msgid ""
"``var``: the output parameter: fill this variable with FALSE if the resource"
" does not exist or the prefix path to the resource otherwise"
msgstr ""
"``var`` : le paramètre de sortie : remplissez cette variable avec FALSE si "
"la ressource n'existe pas ou le préfixe du chemin vers la ressource sinon"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:482
#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:490
#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:502
msgid ""
"``resource_type``: The type of the resource (e.g. "
"``rviz_common__pluginlib__plugin``)"
msgstr ""
"``resource_type`` : le type de la ressource (par exemple, "
"``rviz_common__pluginlib__plugin``)"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:484
#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:492
msgid ""
"``resource_name``: The name of the resource which usually amounts to the "
"name of the package having added the resource of type resource_type (e.g. "
"``rviz_default_plugins``)"
msgstr ""
"``resource_name`` : le nom de la ressource qui correspond généralement au "
"nom du package ayant ajouté la ressource de type resource_type (par exemple,"
" ``rviz_default_plugins``)"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:486
msgid ""
"``ament_index_get_resource``: Obtain the content of a specific resource, "
"i.e. the contents of the marker file in the ament index."
msgstr ""
"``ament_index_get_resource`` : obtient le contenu d'une ressource "
"spécifique, c'est-à-dire le contenu du fichier marqueur dans l'index "
"d'ament."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:488
msgid ""
"``var``: the output parameter: filled with the content of the resource "
"marker file if it exists."
msgstr ""
"``var`` : le paramètre de sortie : rempli avec le contenu du fichier "
"marqueur de ressource s'il existe."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:494
#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:504
msgid ""
"``PREFIX_PATH``: The prefix path to search for (usually, the default "
"``ament_index_get_prefix_path()`` will be enough)."
msgstr ""
"``PREFIX_PATH`` : Le chemin du préfixe à rechercher (généralement, le "
"``ament_index_get_prefix_path()`` par défaut suffira)."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:496
msgid ""
"Note that ``ament_index_get_resource`` will throw an error if the resource "
"does not exist, so it might be necessary to check using "
"``ament_index_has_resource``."
msgstr ""
"Notez que ``ament_index_get_resource`` générera une erreur si la ressource "
"n'existe pas, il peut donc être nécessaire de vérifier en utilisant "
"``ament_index_has_resource``."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:498
msgid ""
"``ament_index_get_resources``: Get all packages which registered resources "
"of a specific type from the index"
msgstr ""
"``ament_index_get_resources`` : récupère tous les packages qui ont "
"enregistré des ressources d'un type spécifique à partir de l'index"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:500
msgid ""
"``var``: Output parameter: filled with a list of names of all packages which"
" registered a resource of resource_type"
msgstr ""
"``var`` : Paramètre de sortie : rempli avec une liste de noms de tous les "
"packages qui ont enregistré une ressource de type_ressource"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:507
msgid "Adding to the ament index"
msgstr "Ajout à l'index des aments"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:509
msgid "Defining a resource requires two bits of information:"
msgstr "La définition d'une ressource nécessite deux informations :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:511
msgid "a name for the resource which must be unique,"
msgstr "un nom pour la ressource qui doit être unique,"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:513
msgid ""
"a layout of the marker file, which can be anything and could also be empty "
"(this is true for instance for the \"package\" resource marking a ROS 2 "
"package)"
msgstr ""
"une mise en page du fichier marqueur, qui peut être n'importe quoi et peut "
"aussi être vide (c'est vrai par exemple pour la ressource \"package\" "
"marquant un package ROS 2)"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:515
msgid "For the RViz mesh resource, the corresponding choices were:"
msgstr ""
"Pour la ressource de maillage RViz, les choix correspondants étaient :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:517
msgid "``rviz_ogre_media_exports`` as name of the resource,"
msgstr "``rviz_ogre_media_exports`` comme nom de la ressource,"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:519
msgid ""
"install path relative paths to all folders containing resources. This will "
"already enable you to write the logic for using the corresponding resource "
"in your package."
msgstr ""
"chemin d'installation chemins relatifs vers tous les dossiers contenant des "
"ressources. Cela vous permettra déjà d'écrire la logique d'utilisation de la"
" ressource correspondante dans votre package."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:521
msgid ""
"To allow users to easily register resources for your package, you should "
"furthermore provide macros or functions such as the pluginlib function or "
"``rviz_ogre_media_exports`` function."
msgstr ""
"Pour permettre aux utilisateurs d'enregistrer facilement des ressources pour"
" votre package, vous devez en outre fournir des macros ou des fonctions "
"telles que la fonction pluginlib ou la fonction ``rviz_ogre_media_exports``."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:523
msgid ""
"To register a resource, use the ament function "
"``ament_index_register_resource``. This will create and install the marker "
"files in the resource_index. As an example, the corresponding call for "
"``rviz_ogre_media_exports`` is the following:"
msgstr ""
"Pour enregistrer une ressource, utilisez la fonction ament "
"``ament_index_register_resource``. Cela créera et installera les fichiers "
"marqueurs dans le fichier resource_index. Par exemple, l'appel correspondant"
" pour ``rviz_ogre_media_exports`` est le suivant :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:531
msgid ""
"This installs a file named like ``${PROJECT_NAME}`` into a folder "
"``rviz_ogre_media_exports`` into the resource_index with content given by "
"variable ``${OGRE_MEDIA_RESOURCE_FILE}``. The macro has a number of "
"parameters that can be useful:"
msgstr ""
"Cela installe un fichier nommé comme ``${PROJECT_NAME}`` dans un dossier "
"``rviz_ogre_media_exports`` dans le resource_index avec le contenu donné par"
" la variable ``${OGRE_MEDIA_RESOURCE_FILE}``. La macro a un certain nombre "
"de paramètres qui peuvent être utiles :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:534
msgid ""
"the first (unnamed) parameter is the name of the resource, which amounts to "
"the name of the folder in the resource_index"
msgstr ""
"le premier paramètre (sans nom) est le nom de la ressource, qui équivaut au "
"nom du dossier dans le resource_index"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:536
msgid ""
"``CONTENT``: The content of the marker file as string. This could be a list "
"of relative paths, etc. ``CONTENT`` cannot be used together with "
"``CONTENT_FILE``."
msgstr ""
"``CONTENT`` : Le contenu du fichier marqueur sous forme de chaîne. Il peut "
"s'agir d'une liste de chemins relatifs, etc. ``CONTENT`` ne peut pas être "
"utilisé avec ``CONTENT_FILE``."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:538
msgid ""
"``CONTENT_FILE``: The path to a file which will be use to create the marker "
"file. The file can be a plain file or a template file expanded with "
"``configure_file()``. ``CONTENT_FILE`` cannot be used together with "
"``CONTENT``."
msgstr ""
"``CONTENT_FILE`` : Le chemin vers un fichier qui sera utilisé pour créer le "
"fichier marqueur. Le fichier peut être un fichier simple ou un fichier "
"modèle développé avec ``configure_file()``. ``CONTENT_FILE`` ne peut pas "
"être utilisé avec ``CONTENT``."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:541
msgid ""
"``PACKAGE_NAME``: The name of the package/library exporting the resource, "
"which amounts to the name of the marker file. Defaults to "
"``${PROJECT_NAME}``."
msgstr ""
"``PACKAGE_NAME`` : le nom du package/de la bibliothèque exportant la "
"ressource, qui correspond au nom du fichier marqueur. La valeur par défaut "
"est ``${PROJECT_NAME}``."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:543
msgid ""
"``AMENT_INDEX_BINARY_DIR``: The base path of the generated ament index. "
"Unless really necessary, always use the default "
"``${CMAKE_BINARY_DIR}/ament_cmake_index``."
msgstr ""
"``AMENT_INDEX_BINARY_DIR`` : Le chemin de base de l'index d'ament généré. "
"Sauf si vraiment nécessaire, utilisez toujours la valeur par défaut "
"``${CMAKE_BINARY_DIR}/ament_cmake_index``."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:545
msgid "``SKIP_INSTALL``: Skip installing the marker file."
msgstr "``SKIP_INSTALL`` : ignore l'installation du fichier marqueur."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:547
msgid ""
"Since only one marker file exists per package, it is usually a problem if "
"the CMake function/macro gets called twice by the same project. However, for"
" large projects it might be best to split up calls registering resources."
msgstr ""
"Puisqu'il n'existe qu'un seul fichier marqueur par package, c'est "
"généralement un problème si la fonction/macro CMake est appelée deux fois "
"par le même projet. Cependant, pour les grands projets, il peut être "
"préférable de diviser les appels enregistrant les ressources."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:550
msgid ""
"Therefore, it is best practice to let a macro registering a resource such as"
" ``register_rviz_ogre_media_exports.cmake`` only fill some variables. The "
"real call to ``ament_index_register_resource`` can then be added within an "
"ament extension to ``ament_package``. Since there must only ever be one call"
" to ``ament_package`` per project, there will always only be one place where"
" the resource gets registered. In the case of ``rviz_ogre_media_exports`` "
"this amounts to the following strategy:"
msgstr ""
"Par conséquent, il est préférable de laisser une macro enregistrant une "
"ressource telle que ``register_rviz_ogre_media_exports.cmake`` ne remplir "
"que certaines variables. Le véritable appel à "
"``ament_index_register_resource`` peut alors être ajouté dans une extension "
"ament à ``ament_package``. Puisqu'il ne doit y avoir qu'un seul appel à "
"``ament_package`` par projet, il n'y aura toujours qu'un seul endroit où la "
"ressource sera enregistrée. Dans le cas de ``rviz_ogre_media_exports`` cela "
"revient à la stratégie suivante :"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:555
msgid ""
"The macro ``register_rviz_ogre_media_exports`` takes a list of folders and "
"appends them to a variable called ``OGRE_MEDIA_RESOURCE_FILE``."
msgstr ""
"La macro ``register_rviz_ogre_media_exports`` prend une liste de dossiers et"
" les ajoute à une variable appelée ``OGRE_MEDIA_RESOURCE_FILE``."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:557
msgid ""
"Another macro called ``register_rviz_ogre_media_exports_hook`` calls "
"``ament_index_register_resource`` if ``${OGRE_MEDIA_RESOURCE_FILE}`` is non-"
"empty."
msgstr ""
"Une autre macro appelée ``register_rviz_ogre_media_exports_hook`` appelle "
"``ament_index_register_resource`` si ``${OGRE_MEDIA_RESOURCE_FILE}`` n'est "
"pas vide."

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:559
msgid ""
"The ``register_rviz_ogre_media_exports_hook.cmake`` file is registered as an"
" ament extension in a third file ``register_rviz_ogre_media_exports_hook-"
"extras.cmake`` via calling"
msgstr ""
"Le fichier ``register_rviz_ogre_media_exports_hook.cmake`` est enregistré en"
" tant qu'extension ament dans un troisième fichier "
"``register_rviz_ogre_media_exports_hook-extras.cmake`` via l'appel"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:566
msgid ""
"The files ``register_rviz_ogre_media_exports.cmake`` and "
"``register_rviz_ogre_media_exports_hook-extra.cmake`` are registered as "
"``CONFIG_EXTRA`` with ``ament_package()``."
msgstr ""
"Les fichiers ``register_rviz_ogre_media_exports.cmake`` et "
"``register_rviz_ogre_media_exports_hook-extra.cmake`` sont enregistrés en "
"tant que ``CONFIG_EXTRA`` avec ``ament_package()``."
