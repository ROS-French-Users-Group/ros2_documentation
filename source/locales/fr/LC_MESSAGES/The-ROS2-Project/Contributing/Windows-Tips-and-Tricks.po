# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-03 19:47+0100\n"
"PO-Revision-Date: 2023-02-09 16:29:45.535902\n"
"Last-Translator: potranslator 1.1.5\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Translated-By: potranslator 1.1.5\n"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:6
msgid "Windows Tips and Tricks"
msgstr "Trucs et astuces Windows"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:10
msgid "Table of Contents"
msgstr "Table des matières"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:12
msgid ""
"ROS 2 supports Windows 10 as a Tier 1 platform, which means that all code "
"that goes into the ROS 2 core must support Windows. For those used to "
"traditional development on Linux or other Unix-like systems, developing on "
"Windows can be a bit of a challenge. This document aims to lay out some of "
"those differences."
msgstr ""
"ROS 2 prend en charge Windows 10 en tant que plate-forme de niveau 1, ce qui"
" signifie que tout le code qui entre dans le noyau ROS 2 doit prendre en "
"charge Windows. Pour ceux qui sont habitués au développement traditionnel "
"sur Linux ou d'autres systèmes de type Unix, le développement sur Windows "
"peut être un peu difficile. Ce document vise à présenter certaines de ces "
"différences."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:17
msgid "Maximum Path Length"
msgstr "Longueur maximale du chemin"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:18
msgid ""
"By default, Windows has a `maximum path length "
"<https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-"
"limitation>`__ of 260 characters. Practically speaking, 4 of those "
"characters are always used by the drive letter, colon, initial backslash, "
"and final NULL character. That means that only 256 characters are available "
"for the *sum* of all parts of the path. This has two practical consequences "
"for ROS 2:"
msgstr ""
"Par défaut, Windows a une `longueur de chemin maximale "
"<https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-"
"limitation>`__ de 260 caractères. En pratique, 4 de ces caractères sont "
"toujours utilisés par la lettre de lecteur, les deux-points, la barre "
"oblique inverse initiale et le caractère NULL final. Cela signifie que seuls"
" 256 caractères sont disponibles pour la *somme* de toutes les parties du "
"chemin. Cela a deux conséquences pratiques pour ROS 2 :"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:23
msgid ""
"Some of the ROS 2 internal path names are fairly long. Because of this, we "
"always recommend using a short path name for the root of your ROS 2 "
"directory, like ``C:\\dev``."
msgstr ""
"Certains des noms de chemin interne de ROS 2 sont assez longs. Pour cette "
"raison, nous recommandons toujours d'utiliser un nom de chemin court pour la"
" racine de votre répertoire ROS 2, comme ``C:\\dev``."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:24
msgid ""
"When building ROS 2 from source, the default isolated build mode of colcon "
"can generate very long path names. To avoid these very long path names, use "
"``--merge-install`` when building on Windows."
msgstr ""
"Lors de la construction de ROS 2 à partir de la source, le mode de "
"construction isolé par défaut de colcon peut générer des noms de chemin très"
" longs. Pour éviter ces noms de chemin très longs, utilisez ``--merge-"
"install`` lors de la construction sous Windows."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:26
msgid ""
"**Note**: It is possible to change Windows to have much longer maximum path "
"lengths. See `this article <https://docs.microsoft.com/en-"
"us/windows/win32/fileio/maximum-file-path-limitation?tabs=cmd#enable-long-"
"paths-in-windows-10-version-1607-and-later>`__ for more information."
msgstr ""
"**Remarque** : Il est possible de modifier Windows pour avoir des longueurs "
"de chemin maximales beaucoup plus longues. Voir `cet article "
"<https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-"
"limitation?tabs=cmd#enable-long-paths-in-windows-10-version -1607-et-plus "
"tard>`__ pour plus d'informations."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:32
msgid "Symbol Visibility"
msgstr "Visibilité des symboles"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:33
msgid ""
"The Microsoft Visual C++ Compiler (MSVC) exposes symbols from a Dynamic Link"
" Library (DLL) only if they are explicitly exported. The clang and gcc "
"compilers have an option to do the same, but it is off by default. As a "
"result, when a library previously built on Linux is built on Windows, other "
"libraries may be unable to resolve the external symbols. Below are examples "
"of common error messages which can be caused by symbols not being exposed:"
msgstr ""
"Le compilateur Microsoft Visual C++ (MSVC) expose les symboles d'une "
"bibliothèque de liens dynamiques (DLL) uniquement s'ils sont explicitement "
"exportés. Les compilateurs clang et gcc ont une option pour faire la même "
"chose, mais elle est désactivée par défaut. Par conséquent, lorsqu'une "
"bibliothèque précédemment construite sur Linux est construite sur Windows, "
"d'autres bibliothèques peuvent être incapables de résoudre les symboles "
"externes. Vous trouverez ci-dessous des exemples de messages d'erreur "
"courants qui peuvent être provoqués par des symboles non exposés :"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:49
msgid ""
"Symbol Visibility also impacts binary loading. If you are finding that a "
"composable node does not run or a Qt Visualizer isn't working, it may be "
"that the hosting process can not find an expected symbol export from the "
"binary. To diagnose this on Windows, the Windows developer tools includes a "
"program called Gflags to enable various options. One of those options is "
"called *Loader Snaps* which enables you to detect load failures while "
"debugging. Please visit the Microsoft Documentation for more information on "
"`Gflags <https://docs.microsoft.com/en-us/windows-"
"hardware/drivers/debugger/setting-and-clearing-image-file-flags>`__ and "
"`Loaders snaps <https://docs.microsoft.com/en-us/windows-"
"hardware/drivers/debugger/show-loader-snaps>`__."
msgstr ""
"La visibilité des symboles a également un impact sur le chargement binaire. "
"Si vous constatez qu'un nœud composable ne s'exécute pas ou qu'un "
"visualiseur Qt ne fonctionne pas, il se peut que le processus d'hébergement "
"ne puisse pas trouver une exportation de symbole attendue à partir du "
"binaire. Pour diagnostiquer cela sous Windows, les outils de développement "
"Windows incluent un programme appelé Gflags pour activer diverses options. "
"L'une de ces options s'appelle *Loader Snaps* qui vous permet de détecter "
"les échecs de chargement lors du débogage. Veuillez consulter la "
"documentation Microsoft pour plus d'informations sur `Gflags "
"<https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/setting-"
"and-clearing-image-file-flags>`__ et ` Snaps des chargeurs "
"<https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/show-"
"loader-snaps>`__."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:55
msgid ""
"Two solutions to export symbols on Windows are Visibility Control Headers "
"and the ``WINDOWS_EXPORT_ALL_SYMBOLS`` property. Microsoft recommends ROS "
"developers use Visibility Control Headers to control the export of symbols "
"from a binary. Visibility Control Headers provide more control over the "
"symbol export macro and offer other benefits including smaller binary size "
"and reduced link times."
msgstr ""
"Deux solutions pour exporter des symboles sur Windows sont les en-têtes de "
"contrôle de visibilité et la propriété ``WINDOWS_EXPORT_ALL_SYMBOLS``. "
"Microsoft recommande aux développeurs ROS d'utiliser les en-têtes de "
"contrôle de visibilité pour contrôler l'exportation des symboles à partir "
"d'un binaire. Les en-têtes de contrôle de visibilité offrent plus de "
"contrôle sur la macro d'exportation de symboles et offrent d'autres "
"avantages, notamment une taille binaire plus petite et des temps de liaison "
"réduits."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:60
msgid "Visibility Control Headers"
msgstr "En-têtes de contrôle de visibilité"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:61
msgid ""
"The purpose of Visibility Control Headers headers is to define a macro for "
"each shared library which correctly declares symbols as dllimport or "
"dllexport. This is decided based on whether the library is being consumed or"
" being built itself. The logic in the macro also takes the compiler into "
"account and includes logic to select the appropriate syntax. The `GCC "
"visibility documentation <https://gcc.gnu.org/wiki/Visibility>`__ includes "
"step by step instructions for adding explicit symbol visibility to a library"
" “yielding the highest quality code with the greatest reductions in binary "
"size, load times and link times”. A header named ``visibility_control.h`` "
"can be placed in the ``includes`` folder for each library as shown in the "
"example below. The example below shows how a visibility control header would"
" be added for a ``my_lib`` library with a class called ``example_class``. "
"Add a visibility header to the include folder for the library. The boiler "
"plate logic is used with the library name used in the macro to make it "
"unique in the project. In another library, ``MY_LIB`` would be replaced with"
" the library name."
msgstr ""
"Le but des en-têtes Visibility Control Headers est de définir une macro pour"
" chaque bibliothèque partagée qui déclare correctement les symboles comme "
"dllimport ou dllexport. Ceci est décidé selon que la bibliothèque est "
"consommée ou construite elle-même. La logique de la macro prend également en"
" compte le compilateur et inclut une logique pour sélectionner la syntaxe "
"appropriée. La `documentation de visibilité GCC "
"<https://gcc.gnu.org/wiki/Visibility>`__ comprend des instructions étape par"
" étape pour ajouter une visibilité de symbole explicite à une bibliothèque "
"\"produisant le code de la plus haute qualité avec les plus grandes "
"réductions de taille binaire, de charge heures et heures de liaison ». Un "
"en-tête nommé ``visibility_control.h`` peut être placé dans le dossier "
"``includes`` pour chaque bibliothèque, comme indiqué dans l'exemple ci-"
"dessous. L'exemple ci-dessous montre comment un en-tête de contrôle de "
"visibilité serait ajouté pour une bibliothèque ``my_lib`` avec une classe "
"appelée ``example_class``. Ajoutez un en-tête de visibilité au dossier "
"d'inclusion de la bibliothèque. La logique de plaque de chaudière est "
"utilisée avec le nom de bibliothèque utilisé dans la macro pour le rendre "
"unique dans le projet. Dans une autre bibliothèque, ``MY_LIB`` serait "
"remplacé par le nom de la bibliothèque."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:96
msgid ""
"For a complete example of this header, see `rviz_rendering "
"<https://github.com/ros2/rviz/blob/ros2/rviz_rendering/include/rviz_rendering/visibility_control.hpp>`__."
msgstr ""
"Pour un exemple complet de cet en-tête, voir `rviz_rendering "
"<https://github.com/ros2/rviz/blob/ros2/rviz_rendering/include/rviz_rendering/visibility_control.hpp>`__."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:98
msgid ""
"To use the macro, add ``MY_LIB_PUBLIC`` before symbols which need to be "
"visible to external libraries. For example:"
msgstr ""
"Pour utiliser la macro, ajoutez ``MY_LIB_PUBLIC`` avant les symboles qui "
"doivent être visibles pour les bibliothèques externes. Par exemple:"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:106
msgid ""
"In order to build your library with correctly exported symbols, you will "
"need to add the following to your CMakeLists.txt file:"
msgstr ""
"Afin de construire votre bibliothèque avec des symboles correctement "
"exportés, vous devrez ajouter ce qui suit à votre fichier CMakeLists.txt :"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:115
msgid "WINDOWS_EXPORT_ALL_SYMBOLS Target Property"
msgstr "Propriété cible WINDOWS_EXPORT_ALL_SYMBOLS"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:116
msgid ""
"CMake implements the ``WINDOWS_EXPORT_ALL_SYMBOLS`` property on Windows, "
"which causes function symbols to be automatically exported. More detail of "
"how it works can be found in the `WINDOWS_EXPORT_ALL_SYMBOLS CMake "
"Documentation "
"<https://cmake.org/cmake/help/latest/prop_tgt/WINDOWS_EXPORT_ALL_SYMBOLS.html>`__."
" The property can be implemented by adding the following to the CMakeLists "
"file:"
msgstr ""
"CMake implémente la propriété ``WINDOWS_EXPORT_ALL_SYMBOLS`` sous Windows, "
"qui entraîne l'exportation automatique des symboles de fonction. Vous "
"trouverez plus de détails sur son fonctionnement dans la `documentation "
"WINDOWS_EXPORT_ALL_SYMBOLS CMake "
"<https://cmake.org/cmake/help/latest/prop_tgt/WINDOWS_EXPORT_ALL_SYMBOLS.html>`__."
" La propriété peut être implémentée en ajoutant ce qui suit au fichier "
"CMakeLists :"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:124
msgid ""
"If there is more than one library in a CMakeLists file you will need to call"
" ``set_target_properties`` on each of them separately."
msgstr ""
"S'il y a plus d'une bibliothèque dans un fichier CMakeLists, vous devrez "
"appeler ``set_target_properties`` sur chacune d'elles séparément."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:126
msgid ""
"Note that a binary on Windows can only export 65,536 symbols. If a binary "
"exports more than that, you will get an error and should use the "
"visibility_control headers. There is an exception to this method in the case"
" of global data symbols. For example, a global static data member like the "
"one below."
msgstr ""
"Notez qu'un binaire sous Windows ne peut exporter que 65 536 symboles. Si un"
" binaire exporte plus que cela, vous obtiendrez une erreur et devrez "
"utiliser les en-têtes visibilité_control. Il existe une exception à cette "
"méthode dans le cas des symboles de données globales. Par exemple, un membre"
" de données statique global comme celui ci-dessous."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:139
msgid ""
"In these cases dllimprort/dllexport must be applied explicitly. This can be "
"done using generate_export_header as described in the following article: "
"`Create dlls on Windows without declspec() using new CMake export all "
"feature <https://blog.kitware.com/create-dlls-on-windows-without-declspec-"
"using-new-cmake-export-all-feature/>`__."
msgstr ""
"Dans ces cas, dllimprot/dllexport doit être appliqué explicitement. Cela "
"peut être fait en utilisant generate_export_header comme décrit dans "
"l'article suivant : `Create dlls on Windows without declspec() using new "
"CMake export all feature <https://blog.kitware.com/create-dlls-on-windows-"
"without-declspec -using-new-cmake-export-all-feature/>`__."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:142
msgid ""
"Finally, it is important that the header file that exports the symbols be "
"included into at least one of the ``.cpp`` files in the package so that the "
"macros will get expanded and placed into the resulting binary. Otherwise the"
" symbols will still not be callable."
msgstr ""
"Enfin, il est important que le fichier d'en-tête qui exporte les symboles "
"soit inclus dans au moins un des fichiers ``.cpp`` du paquet afin que les "
"macros soient développées et placées dans le binaire résultant. Sinon, les "
"symboles ne seront toujours pas appelables."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:147
msgid "Debug builds"
msgstr "Versions de débogage"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:148
msgid ""
"When building in Debug mode on Windows, several very important things "
"change. The first is that all DLLs get ``_d`` automatically appended to the "
"library name. So if the library is called ``libfoo.dll``, in Debug mode it "
"will be ``libfoo_d.dll``. The dynamic linker on Windows also knows to look "
"for libraries of that form, so it will not find libraries without the ``_d``"
" prefix. Additionally, Windows turns on a whole set of compile-time and run-"
"time checks in Debug mode that is far more strict than Release builds. For "
"these reasons, it is a good idea to run a Windows Debug build and test on "
"many pull requests."
msgstr ""
"Lors de la construction en mode débogage sous Windows, plusieurs choses très"
" importantes changent. La première est que toutes les DLL obtiennent ``_d`` "
"automatiquement ajouté au nom de la bibliothèque. Ainsi, si la bibliothèque "
"s'appelle ``libfoo.dll``, en mode Debug, ce sera ``libfoo_d.dll``. L'éditeur"
" de liens dynamique sous Windows sait également rechercher des bibliothèques"
" de cette forme, il ne trouvera donc pas de bibliothèques sans le préfixe "
"``_d``. De plus, Windows active un ensemble complet de vérifications au "
"moment de la compilation et de l'exécution en mode débogage qui est beaucoup"
" plus strict que les versions Release. Pour ces raisons, il est judicieux "
"d'exécuter une version de débogage Windows et de tester sur de nombreuses "
"demandes d'extraction."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:156
msgid "Forward-slash vs. back-slash"
msgstr "Barre oblique contre barre oblique inverse"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:157
msgid ""
"In Windows the default path separator is a backslash (``\\``), which differs"
" from the forward-slash (``/``) used in Linux and macOS. Most of the Windows"
" APIs can deal with either as a path separator, but this is not universally "
"true. For instance, the ``cmd.exe`` shell can only do tab-completion when "
"using the backslash character, not the forward-slash. For maximum "
"compatibility on Windows, a backslash should always be used as the path "
"separator on Windows."
msgstr ""
"Sous Windows, le séparateur de chemin par défaut est une barre oblique "
"inverse (``\\``), qui diffère de la barre oblique (``/``) utilisée sous "
"Linux et macOS. La plupart des API Windows peuvent traiter l'un ou l'autre "
"comme séparateur de chemin, mais ce n'est pas universellement vrai. Par "
"exemple, le shell ``cmd.exe`` ne peut effectuer de tabulation qu'en "
"utilisant le caractère barre oblique inverse, pas la barre oblique. Pour une"
" compatibilité maximale sous Windows, une barre oblique inverse doit "
"toujours être utilisée comme séparateur de chemin sous Windows."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:163
msgid "Patching vendored packages"
msgstr "Correctif des packages du fournisseur"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:164
msgid ""
"When vendoring a package in ROS 2, it is often necessary to apply a patch to"
" fix a bug, add a feature, etc. The typical way to do this is to modify the "
"``ExternalProject_add`` call to add a ``PATCH`` command, using the ``patch``"
" executable. Unfortunately, the ``patch`` executable as delivered by "
"chocolatey requires Administrator access to run. The workaround is to use "
"``git apply-patch`` when applying patches to external projects."
msgstr ""
"Lors de la vente d'un package dans ROS 2, il est souvent nécessaire "
"d'appliquer un correctif pour corriger un bogue, ajouter une fonctionnalité,"
" etc. La façon typique de le faire est de modifier l'appel "
"``ExternalProject_add`` pour ajouter un ``PATCH` `, en utilisant "
"l'exécutable ``patch``. Malheureusement, l'exécutable ``patch`` fourni par "
"chocolatey nécessite un accès administrateur pour s'exécuter. La solution "
"consiste à utiliser ``git apply-patch`` lors de l'application de correctifs "
"à des projets externes."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:169
msgid ""
"``git apply-patch`` has its own issues in that it only works properly when "
"applied to a git repository. For that reason, external projects should "
"always use the ``GIT`` method to obtain the project and then use the "
"``PATCH_COMMAND`` to invoke ``git apply-patch``."
msgstr ""
"``git apply-patch`` a ses propres problèmes en ce sens qu'il ne fonctionne "
"correctement que lorsqu'il est appliqué à un référentiel git. Pour cette "
"raison, les projets externes doivent toujours utiliser la méthode ``GIT`` "
"pour obtenir le projet, puis utiliser la ``PATCH_COMMAND`` pour invoquer "
"``git apply-patch``."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:172
msgid "An example usage of all of the above looks something like:"
msgstr "Un exemple d'utilisation de tout ce qui précède ressemble à :"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:193
msgid "Windows slow timers (slowness in general)"
msgstr "Minuteries lentes de Windows (lenteur en général)"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:194
msgid ""
"Software running on Windows is, in general, much slower than that running on"
" Linux. This is due to a number of factors, from the default time slice "
"(every 20 ms, according to the `documentation "
"<https://docs.microsoft.com/en-"
"us/windows/win32/procthread/multitasking>`__), to the number of anti-virus "
"and anti-malware processes running, to the number of background processes "
"running. Because of all of this, tests should *never* expect tight timing on"
" Windows. All tests should have generous timeouts, and only expect events to"
" happen eventually (this will also prevent tests from being flakey on "
"Linux)."
msgstr ""
"Les logiciels fonctionnant sous Windows sont, en général, beaucoup plus "
"lents que ceux fonctionnant sous Linux. Cela est dû à un certain nombre de "
"facteurs, à partir de la tranche de temps par défaut (toutes les 20 ms, "
"selon la `documentation <https://docs.microsoft.com/en-"
"us/windows/win32/procthread/multitasking>`__) , au nombre de processus "
"antivirus et anti-malware en cours d'exécution, au nombre de processus "
"d'arrière-plan en cours d'exécution. À cause de tout cela, les tests ne "
"doivent *jamais* s'attendre à un timing serré sous Windows. Tous les tests "
"doivent avoir des délais d'attente généreux et ne s'attendre qu'à ce que des"
" événements se produisent éventuellement (cela empêchera également les tests"
" d'être flakey sous Linux)."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:200
msgid "Shells"
msgstr "Coquilles"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:201
msgid ""
"There are two main command-line shells on Windows: the venerable "
"``cmd.exe``, and PowerShell."
msgstr ""
"Il existe deux principaux shells de ligne de commande sous Windows : le "
"vénérable ``cmd.exe`` et PowerShell."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:203
msgid ""
"``cmd.exe`` is the command shell that most closely emulates the old DOS "
"shell, though with greatly enhanced capabilities. It is completely text "
"based, and only understands DOS/Windows ``batch`` files."
msgstr ""
"``cmd.exe`` est le shell de commande qui émule le plus l'ancien shell DOS, "
"mais avec des capacités grandement améliorées. Il est entièrement basé sur "
"du texte et ne comprend que les fichiers ``batch`` DOS/Windows."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:206
msgid ""
"PowerShell is the newer, object-based shell that Microsoft recommends for "
"most new applications. It understands ``ps1`` files for configuration."
msgstr ""
"PowerShell est le nouveau shell basé sur des objets que Microsoft recommande"
" pour la plupart des nouvelles applications. Il comprend les fichiers "
"``ps1`` pour la configuration."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:209
msgid ""
"ROS 2 supports both ``cmd.exe`` and PowerShell, so any changes (especially "
"to things like ``ament`` or ``colcon``) should be tested on both."
msgstr ""
"ROS 2 prend en charge à la fois ``cmd.exe`` et PowerShell, donc toute "
"modification (en particulier des choses comme ``ament`` ou ``colcon``) doit "
"être testée sur les deux."
