# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-07 08:44+0100\n"
"PO-Revision-Date: 2023-02-09 11:59:55.557699\n"
"Last-Translator: potranslator 1.1.5\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Translated-By: potranslator 1.1.5\n"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:8
msgid "Quaternion fundamentals"
msgstr "Fondamentaux du quaternion"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:10
msgid "**Goal:** Learn the basics of quaternion usage in ROS 2."
msgstr ""
"**Objectif :** Apprendre les bases de l'utilisation des quaternions dans "
"ROS 2."

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:12
msgid "**Tutorial level:** Intermediate"
msgstr "**Niveau du didacticiel :** Intermédiaire"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:14
msgid "**Time:** 10 minutes"
msgstr "**Durée :** 10 minutes"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:18
msgid "Contents"
msgstr "Contenu"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:21
msgid "Background"
msgstr "Arrière-plan"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:23
msgid ""
"A quaternion is a 4-tuple representation of orientation, which is more "
"concise than a rotation matrix. Quaternions are very efficient for analyzing"
" situations where rotations in three dimensions are involved. Quaternions "
"are used widely in robotics, quantum mechanics, computer vision, and 3D "
"animation."
msgstr ""
"Un quaternion est une représentation à 4 tuples de l'orientation, qui est "
"plus concise qu'une matrice de rotation. Les quaternions sont très efficaces"
" pour analyser des situations où des rotations en trois dimensions sont "
"impliquées. Les quaternions sont largement utilisés dans la robotique, la "
"mécanique quantique, la vision par ordinateur et l'animation 3D."

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:27
msgid ""
"You can learn more about the underlying mathematical concept on `Wikipedia "
"<https://en.wikipedia.org/wiki/Quaternion>`_. You can also take a look at an"
" explorable video series `Visualizing quaternions "
"<https://eater.net/quaternions>`_ made by `3blue1brown "
"<https://www.youtube.com/3blue1brown>`_."
msgstr ""
"Vous pouvez en savoir plus sur le concept mathématique sous-jacent sur "
"`Wikipedia <https://en.wikipedia.org/wiki/Quaternion>`_. Vous pouvez "
"également jeter un œil à une série de vidéos explorables `Visualizing "
"quaternions <https://eater.net/quaternions>`_ réalisées par `3blue1brown "
"<https://www.youtube.com/3blue1brown>`_."

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:30
msgid ""
"In this tutorial, you will learn how quaternions and conversion methods work"
" in ROS 2."
msgstr ""
"Dans ce didacticiel, vous apprendrez comment les quaternions et les méthodes"
" de conversion fonctionnent dans ROS 2."

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:33
msgid "Prerequisites"
msgstr "Conditions préalables"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:35
msgid ""
"However, this is not a hard requirement and you can stick to any other "
"geometric transfromation library that suit you best. You can take a look at "
"libraries like `transforms3d <https://github.com/matthew-"
"brett/transforms3d>`_, `scipy.spatial.transform "
"<https://github.com/scipy/scipy/tree/master/scipy/spatial/transform>`_, "
"`pytransform3d <https://github.com/rock-learning/pytransform3d>`_, `numpy-"
"quaternion <https://github.com/moble/quaternion>`_ or `blender.mathutils "
"<https://docs.blender.org/api/master/mathutils.html>`_."
msgstr ""
"Cependant, ce n'est pas une exigence stricte et vous pouvez vous en tenir à "
"toute autre bibliothèque de transformation géométrique qui vous convient le "
"mieux. Vous pouvez jeter un œil à des bibliothèques comme `transforms3d "
"<https://github.com/matthew-brett/transforms3d>`_, `scipy.spatial.transform "
"<https://github.com/scipy/scipy/tree/master /scipy/spatial/transform>`_, "
"`pytransform3d <https://github.com/rock-learning/pytransform3d>`_, `numpy-"
"quaternion <https://github.com/moble/quaternion>`_ ou `blender.mathutils "
"<https://docs.blender.org/api/master/mathutils.html>`_."

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:39
msgid "Components of a quaternion"
msgstr "Composants d'un quaternion"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:41
msgid ""
"ROS 2 uses quaternions to track and apply rotations. A quaternion has 4 "
"components ``(x, y, z, w)``. In ROS 2, ``w`` is last, but in some libraries "
"like Eigen, ``w`` can be placed at the first position. The commonly-used "
"unit quaternion that yields no rotation about the x/y/z axes is ``(0, 0, 0, "
"1)``, and can be created in a following way:"
msgstr ""
"ROS 2 utilise des quaternions pour suivre et appliquer des rotations. Un "
"quaternion a 4 composantes ``(x, y, z, w)``. Dans ROS 2, ``w`` est en "
"dernier, mais dans certaines bibliothèques comme Eigen, ``w`` peut être "
"placé en première position. Le quaternion unitaire couramment utilisé qui ne"
" produit aucune rotation autour des axes x/y/z est ``(0, 0, 0, 1)``, et peut"
" être créé de la manière suivante :"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:58
msgid ""
"The magnitude of a quaternion should always be one. If numerical errors "
"cause a quaternion magnitude other than one, ROS 2 will print warnings. To "
"avoid these warnings, normalize the quaternion:"
msgstr ""
"La magnitude d'un quaternion doit toujours être un. Si des erreurs "
"numériques provoquent une magnitude de quaternion autre que un, ROS 2 "
"imprimera des avertissements. Pour éviter ces avertissements, normalisez le "
"quaternion :"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:67
msgid "Quaternion types in ROS 2"
msgstr "Types de quaternions dans ROS 2"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:69
msgid ""
"ROS 2 uses two quaternion datatypes: ``tf2::Quaternion`` and its equivalent "
"``geometry_msgs::msg::Quaternion``. To convert between them in C++, use the "
"methods of ``tf2_geometry_msgs``."
msgstr ""
"ROS 2 utilise deux types de données quaternions : ``tf2::Quaternion`` et son"
" équivalent ``geometry_msgs::msg::Quaternion``. Pour convertir entre eux en "
"C++, utilisez les méthodes de ``tf2_geometry_msgs``."

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:72
#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:126
msgid "C++"
msgstr "C++"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:90
#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:141
msgid "Python"
msgstr "Python"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:105
msgid "Quaternion operations"
msgstr "Opérations de quaternions"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:108
msgid "1 Think in RPY then convert to quaternion"
msgstr "1 Pensez en RPY puis convertissez en quaternion"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:110
msgid ""
"It's easy for us to think of rotations about axes, but hard to think in "
"terms of quaternions. A suggestion is to calculate target rotations in terms"
" of roll (about an X-axis), pitch (about the Y-axis), and yaw (about the "
"Z-axis), and then convert to a quaternion."
msgstr ""
"Il est facile pour nous de penser à des rotations autour d'axes, mais "
"difficile de penser en termes de quaternions. Une suggestion est de calculer"
" les rotations cibles en termes de roulis (autour d'un axe X), de tangage "
"(autour de l'axe Y) et de lacet (autour de l'axe Z), puis de les convertir "
"en un quaternion."

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:121
msgid "2 Applying a quaternion rotation"
msgstr "2 Appliquer une rotation de quaternion"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:123
msgid ""
"To apply the rotation of one quaternion to a pose, simply multiply the "
"previous quaternion of the pose by the quaternion representing the desired "
"rotation. The order of this multiplication matters."
msgstr ""
"Pour appliquer la rotation d'un quaternion à une pose, il suffit de "
"multiplier le quaternion précédent de la pose par le quaternion représentant"
" la rotation souhaitée. L'ordre de cette multiplication est important."

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:152
msgid "3 Inverting a quaternion"
msgstr "3 Inversion d'un quaternion"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:154
msgid "An easy way to invert a quaternion is to negate the w-component:"
msgstr ""
"Un moyen simple d'inverser un quaternion est de nier la composante w :"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:161
msgid "4 Relative rotations"
msgstr "4 Rotations relatives"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:163
msgid ""
"Say you have two quaternions from the same frame, ``q_1`` and ``q_2``. You "
"want to find the relative rotation, ``q_r``, that converts ``q_1`` to "
"``q_2`` in a following manner:"
msgstr ""
"Supposons que vous ayez deux quaternions du même cadre, ``q_1`` et ``q_2``. "
"Vous voulez trouver la rotation relative, ``q_r``, qui convertit ``q_1`` en "
"``q_2`` de la manière suivante :"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:170
msgid ""
"You can solve for ``q_r`` similarly to solving a matrix equation. Invert "
"``q_1`` and right-multiply both sides. Again, the order of multiplication is"
" important:"
msgstr ""
"Vous pouvez résoudre pour ``q r`` similaire à la résolution d'une équation "
"matricielle. Inverse ``q_ 1`` et multiplie à droite les deux côtés. Là "
"encore, l'ordre de multiplication est important :"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:177
msgid ""
"Here's an example to get the relative rotation from the previous robot pose "
"to the current robot pose in python:"
msgstr ""
"Voici un exemple pour obtenir la rotation relative de la pose précédente du "
"robot à la pose actuelle du robot en python :"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:230
msgid "Summary"
msgstr "Résumé"

#: ../../source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst:232
msgid ""
"In this tutorial, you learned about the fundamental concepts of a quaternion"
" and its related mathematical operations, like inversion and rotation. You "
"also learned about its usage examples in ROS 2 and conversion methods "
"between two separate Quaternion classes."
msgstr ""
"Dans ce didacticiel, vous avez découvert les concepts fondamentaux d'un "
"quaternion et ses opérations mathématiques associées, telles que l'inversion"
" et la rotation. Vous avez également découvert ses exemples d'utilisation "
"dans ROS 2 et les méthodes de conversion entre deux classes Quaternion "
"distinctes."
