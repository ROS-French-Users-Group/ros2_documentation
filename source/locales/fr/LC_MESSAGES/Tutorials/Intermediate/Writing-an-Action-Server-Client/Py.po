# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-07 08:44+0100\n"
"PO-Revision-Date: 2023-02-09 12:03:29.223841\n"
"Last-Translator: potranslator 1.1.5\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Translated-By: potranslator 1.1.5\n"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:8
msgid "Writing an action server and client (Python)"
msgstr "Ecriture d'un serveur d'action et d'un client (Python)"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:10
msgid "**Goal:** Implement an action server and client in Python."
msgstr ""
"**Objectif :** Implémenter un serveur d'action et un client en Python."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:12
msgid "**Tutorial level:** Intermediate"
msgstr "**Niveau du didacticiel :** Intermédiaire"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:14
msgid "**Time:** 15 minutes"
msgstr "**Durée :** 15 minutes"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:18
msgid "Contents"
msgstr "Contenu"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:21
msgid "Background"
msgstr "Arrière-plan"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:23
msgid ""
"Actions are a form of asynchronous communication in ROS 2. *Action clients* "
"send goal requests to *action servers*. *Action servers* send goal feedback "
"and results to *action clients*."
msgstr ""
"Les actions sont une forme de communication asynchrone dans ROS 2. Les "
"*clients d'action* envoient des demandes d'objectif aux *serveurs d'action*."
" Les *serveurs d'action* envoient des commentaires sur les objectifs et les "
"résultats aux *clients d'action*."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:28
msgid "Prerequisites"
msgstr "Conditions préalables"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:30
msgid ""
"You will need the ``action_tutorials_interfaces`` package and the "
"``Fibonacci.action`` interface defined in the previous tutorial, "
":doc:`../Creating-an-Action`."
msgstr ""
"Vous aurez besoin du package ``action_tutorials_interfaces`` et de "
"l'interface ``Fibonacci.action`` définie dans le tutoriel précédent, "
":doc:`../Creating-an-Action`."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:34
msgid "Tasks"
msgstr "Tâches"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:37
msgid "1 Writing an action server"
msgstr "1 Ecrire un serveur d'action"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:39
msgid ""
"Let's focus on writing an action server that computes the Fibonacci sequence"
" using the action we created in the :doc:`../Creating-an-Action` tutorial."
msgstr ""
"Concentrons-nous sur l'écriture d'un serveur d'action qui calcule la "
"séquence de Fibonacci en utilisant l'action que nous avons créée dans le "
"tutoriel :doc:`../Creating-an-Action`."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:42
msgid ""
"Until now, you've created packages and used ``ros2 run`` to run your nodes. "
"To keep things simple in this tutorial, however, we’ll scope the action "
"server to a single file. If you'd like to see what a complete package for "
"the actions tutorials looks like, check out `action_tutorials "
"<https://github.com/ros2/demos/tree/rolling/action_tutorials>`__."
msgstr ""
"Jusqu'à présent, vous avez créé des packages et utilisé ``ros2 run`` pour "
"exécuter vos nœuds. Cependant, pour simplifier les choses dans ce "
"didacticiel, nous limiterons le serveur d'action à un seul fichier. Si vous "
"souhaitez voir à quoi ressemble un package complet pour les didacticiels "
"d'actions, consultez `action_tutorials "
"<https://github.com/ros2/demos/tree/rolling/action_tutorials>`__."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:47
msgid ""
"Open a new file in your home directory, let's call it "
"``fibonacci_action_server.py``, and add the following code:"
msgstr ""
"Ouvrez un nouveau fichier dans votre répertoire personnel, appelons-le "
"``fibonacci_action_server.py``, et ajoutez le code suivant :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:53
msgid ""
"Line 8 defines a class ``FibonacciActionServer`` that is a subclass of "
"``Node``. The class is initialized by calling the ``Node`` constructor, "
"naming our node ``fibonacci_action_server``:"
msgstr ""
"La ligne 8 définit une classe ``FibonacciActionServer`` qui est une sous-"
"classe de ``Node``. La classe est initialisée en appelant le constructeur "
"``Node``, en nommant notre nœud ``fibonacci_action_server`` :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:60
msgid "In the constructor we also instantiate a new action server:"
msgstr ""
"Dans le constructeur, nous instancions également un nouveau serveur "
"d'action :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:66
msgid "An action server requires four arguments:"
msgstr "Un serveur d'action nécessite quatre arguments :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:68
msgid "A ROS 2 node to add the action client to: ``self``."
msgstr "Un nœud ROS 2 auquel ajouter le client d'action : ``self``."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:69
msgid "The type of the action: ``Fibonacci`` (imported in line 5)."
msgstr "Le type de l'action : ``Fibonacci`` (importé à la ligne 5)."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:70
msgid "The action name: ``'fibonacci'``."
msgstr "Le nom de l'action : ``'fibonacci'``."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:71
msgid ""
"A callback function for executing accepted goals: ``self.execute_callback``."
" This callback **must** return a result message for the action type."
msgstr ""
"Une fonction de rappel pour exécuter les objectifs acceptés : "
"``self.execute_callback``. Ce rappel **doit** renvoyer un message de "
"résultat pour le type d'action."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:74
msgid "We also define an ``execute_callback`` method in our class:"
msgstr ""
"Nous définissons également une méthode ``execute_callback`` dans notre "
"classe :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:80
msgid ""
"This is the method that will be called to execute a goal once it is "
"accepted."
msgstr ""
"C'est la méthode qui sera appelée pour exécuter un objectif une fois qu'il "
"est accepté."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:82
msgid "Let's try running our action server:"
msgstr "Essayons d'exécuter notre serveur d'action :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:86
#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:202
#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:224
#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:302
msgid "Linux"
msgstr "Linux"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:92
#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:208
#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:230
#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:308
msgid "macOS"
msgstr "macOS"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:98
#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:214
#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:236
#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:314
msgid "Windows"
msgstr "les fenêtres"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:104
msgid ""
"In another terminal, we can use the command line interface to send a goal:"
msgstr ""
"Dans un autre terminal, nous pouvons utiliser l'interface de ligne de "
"commande pour envoyer un objectif :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:110
msgid ""
"In the terminal that is running the action server, you should see a logged "
"message \"Executing goal...\" followed by a warning that the goal state was "
"not set. By default, if the goal handle state is not set in the execute "
"callback it assumes the *aborted* state."
msgstr ""
"Dans le terminal qui exécute le serveur d'action, vous devriez voir un "
"message enregistré \"Exécution de l'objectif...\" suivi d'un avertissement "
"indiquant que l'état de l'objectif n'a pas été défini. Par défaut, si l'état"
" de la poignée d'objectif n'est pas défini dans le rappel d'exécution, il "
"prend l'état *abandonné*."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:113
msgid ""
"We can use the method `succeed() "
"<http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.server.ServerGoalHandle.succeed>`_"
" on the goal handle to indicate that the goal was successful:"
msgstr ""
"Nous pouvons utiliser la méthode `succeed() "
"<http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.server.ServerGoalHandle.succeed>`_"
" sur le descripteur d'objectif pour indiquer que l'objectif a été atteint :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:120
msgid ""
"Now if you restart the action server and send another goal, you should see "
"the goal finished with the status ``SUCCEEDED``."
msgstr ""
"Maintenant, si vous redémarrez le serveur d'action et envoyez un autre "
"objectif, vous devriez voir l'objectif terminé avec le statut ``SUCCEEDED``."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:122
msgid ""
"Now let's make our goal execution actually compute and return the requested "
"Fibonacci sequence:"
msgstr ""
"Faisons maintenant en sorte que notre objectif d'exécution calcule et "
"renvoie la séquence de Fibonacci demandée :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:129
msgid ""
"After computing the sequence, we assign it to the result message field "
"before returning."
msgstr ""
"Après avoir calculé la séquence, nous l'attribuons au champ de message de "
"résultat avant de revenir."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:131
msgid ""
"Again, restart the action server and send another goal. You should see the "
"goal finish with the proper result sequence."
msgstr ""
"Encore une fois, redémarrez le serveur d'action et envoyez un autre "
"objectif. Vous devriez voir le but se terminer avec la bonne séquence de "
"résultats."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:135
msgid "1.2 Publishing feedback"
msgstr "1.2 Commentaires sur la publication"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:137
msgid ""
"One of the nice things about actions is the ability to provide feedback to "
"an action client during goal execution. We can make our action server "
"publish feedback for action clients by calling the goal handle's "
"`publish_feedback() "
"<http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.server.ServerGoalHandle.publish_feedback>`_"
" method."
msgstr ""
"L'un des avantages des actions est la possibilité de fournir des "
"commentaires à un client d'action lors de l'exécution de l'objectif. Nous "
"pouvons faire en sorte que notre serveur d'action publie des commentaires "
"pour les clients d'action en appelant la fonction `publish_feedback() du "
"descripteur d'objectif "
"<http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.server.ServerGoalHandle"
" .publish_feedback>`_ méthode."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:140
msgid ""
"We'll replace the ``sequence`` variable, and use a feedback message to store"
" the sequence instead. After every update of the feedback message in the "
"for-loop, we publish the feedback message and sleep for dramatic effect:"
msgstr ""
"Nous allons remplacer la variable ``sequence`` et utiliser un message de "
"retour pour stocker la séquence à la place. Après chaque mise à jour du "
"message de retour dans la boucle for, nous publions le message de retour et "
"dormons pour un effet spectaculaire :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:147
msgid ""
"After restarting the action server, we can confirm that feedback is now "
"published by using the command line tool with the ``--feedback`` option:"
msgstr ""
"Après avoir redémarré le serveur d'action, nous pouvons confirmer que les "
"commentaires sont maintenant publiés en utilisant l'outil de ligne de "
"commande avec l'option ``--feedback`` :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:154
msgid "2 Writing an action client"
msgstr "2 Écrire un client d'action"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:156
msgid ""
"We'll also scope the action client to a single file. Open a new file, let's "
"call it ``fibonacci_action_client.py``, and add the following boilerplate "
"code:"
msgstr ""
"Nous allons également limiter le client d'action à un seul fichier. Ouvrez "
"un nouveau fichier, appelons-le ``fibonacci_action_client.py``, et ajoutez "
"le code passe-partout suivant :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:162
msgid ""
"We've defined a class ``FibonacciActionClient`` that is a subclass of "
"``Node``. The class is initialized by calling the ``Node`` constructor, "
"naming our node ``fibonacci_action_client``:"
msgstr ""
"Nous avons défini une classe ``FibonacciActionClient`` qui est une sous-"
"classe de ``Node``. La classe est initialisée en appelant le constructeur "
"``Node``, en nommant notre nœud ``fibonacci_action_client`` :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:169
msgid ""
"Also in the class constructor, we create an action client using the custom "
"action definition from the previous tutorial on :doc:`../Creating-an-"
"Action`:"
msgstr ""
"Toujours dans le constructeur de classe, nous créons un client d'action en "
"utilisant la définition d'action personnalisée du tutoriel précédent sur "
":doc:`../Creating-an-Action` :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:175
msgid "We create an ``ActionClient`` by passing it three arguments:"
msgstr "Nous créons un ``ActionClient`` en lui passant trois arguments :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:177
msgid "A ROS 2 node to add the action client to: ``self``"
msgstr "Un nœud ROS 2 auquel ajouter le client d'action : ``self``"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:178
msgid "The type of the action: ``Fibonacci``"
msgstr "Le type de l'action : ``Fibonacci``"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:179
msgid "The action name: ``'fibonacci'``"
msgstr "Le nom de l'action : ``'fibonacci'``"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:181
msgid ""
"Our action client will be able to communicate with action servers of the "
"same action name and type."
msgstr ""
"Notre client d'action pourra communiquer avec des serveurs d'action du même "
"nom et du même type d'action."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:183
msgid ""
"We also define a method ``send_goal`` in the ``FibonacciActionClient`` "
"class:"
msgstr ""
"Nous définissons également une méthode ``send_goal`` dans la classe "
"``FibonacciActionClient`` :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:189
msgid ""
"This method waits for the action server to be available, then sends a goal "
"to the server. It returns a future that we can later wait on."
msgstr ""
"Cette méthode attend que le serveur d'action soit disponible, puis envoie un"
" objectif au serveur. Il renvoie un avenir que nous pourrons attendre plus "
"tard."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:192
msgid ""
"After the class definition, we define a function ``main()`` that initializes"
" ROS 2 and creates an instance of our ``FibonacciActionClient`` node. It "
"then sends a goal and waits until that goal has been completed."
msgstr ""
"Après la définition de la classe, nous définissons une fonction ``main()`` "
"qui initialise ROS 2 et crée une instance de notre nœud "
"``FibonacciActionClient``. Il envoie ensuite un objectif et attend que cet "
"objectif soit atteint."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:196
msgid "Finally, we call ``main()`` in the entry point of our Python program."
msgstr ""
"Enfin, nous appelons ``main()`` au point d'entrée de notre programme Python."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:198
msgid ""
"Let's test our action client by first running the action server built "
"earlier:"
msgstr ""
"Testons notre client d'action en exécutant d'abord le serveur d'action créé "
"précédemment :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:220
msgid "In another terminal, run the action client:"
msgstr "Dans un autre terminal, lancez l'action client :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:242
msgid ""
"You should see messages printed by the action server as it successfully "
"executes the goal:"
msgstr ""
"Vous devriez voir des messages imprimés par le serveur d'action lorsqu'il "
"exécute avec succès l'objectif :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:253
msgid ""
"The action client should start up, and then quickly finish. At this point, "
"we have a functioning action client, but we don't see any results or get any"
" feedback."
msgstr ""
"Le client d'action doit démarrer, puis se terminer rapidement. À ce stade, "
"nous avons un client d'action fonctionnel, mais nous ne voyons aucun "
"résultat ni n'obtenons de commentaires."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:257
msgid "2.1 Getting a result"
msgstr "2.1 Obtenir un résultat"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:259
msgid ""
"So we can send a goal, but how do we know when it is completed? We can get "
"the result information with a couple steps. First, we need to get a goal "
"handle for the goal we sent. Then, we can use the goal handle to request the"
" result."
msgstr ""
"On peut donc envoyer un objectif, mais comment savoir quand il est atteint ?"
" Nous pouvons obtenir les informations sur les résultats en quelques étapes."
" Tout d'abord, nous devons obtenir une poignée de but pour le but que nous "
"avons envoyé. Ensuite, nous pouvons utiliser la poignée d'objectif pour "
"demander le résultat."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:264
#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:329
msgid "Here's the complete code for this example:"
msgstr "Voici le code complet de cet exemple :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:269
msgid ""
"The `ActionClient.send_goal_async() "
"<http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.client.ActionClient.send_goal_async>`_"
" method returns a future to a goal handle. First we register a callback for "
"when the future is complete:"
msgstr ""
"La méthode `ActionClient.send_goal_async() "
"<http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.client.ActionClient.send_goal_async>`_"
" renvoie un futur à un descripteur d'objectif . Nous enregistrons d'abord un"
" rappel lorsque le futur est terminé :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:276
msgid ""
"Note that the future is completed when an action server accepts or rejects "
"the goal request. Let's look at the ``goal_response_callback`` in more "
"detail. We can check to see if the goal was rejected and return early since "
"we know there will be no result:"
msgstr ""
"Notez que le futur est terminé lorsqu'un serveur d'action accepte ou rejette"
" la demande d'objectif. Regardons le ``goal_response_callback`` plus en "
"détail. Nous pouvons vérifier si l'objectif a été rejeté et revenir plus tôt"
" car nous savons qu'il n'y aura pas de résultat :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:284
msgid ""
"Now that we've got a goal handle, we can use it to request the result with "
"the method `get_result_async() "
"<http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.client.ClientGoalHandle.get_result_async>`_."
" Similar to sending the goal, we will get a future that will complete when "
"the result is ready. Let's register a callback just like we did for the goal"
" response:"
msgstr ""
"Maintenant que nous avons un descripteur d'objectif, nous pouvons l'utiliser"
" pour demander le résultat avec la méthode `get_result_async() "
"<http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy. "
"action.client.ClientGoalHandle.get_result_async>`_. Semblable à l'envoi de "
"l'objectif, nous aurons un avenir qui se terminera lorsque le résultat sera "
"prêt. Enregistrons un rappel comme nous l'avons fait pour la réponse à "
"l'objectif :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:292
msgid ""
"In the callback, we log the result sequence and shutdown ROS 2 for a clean "
"exit:"
msgstr ""
"Dans le rappel, nous enregistrons la séquence de résultats et arrêtons ROS 2"
" pour une sortie propre :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:298
msgid ""
"With an action server running in a separate terminal, go ahead and try "
"running our Fibonacci action client!"
msgstr ""
"Avec un serveur d'action exécuté dans un terminal séparé, essayez d'exécuter"
" notre client d'action Fibonacci !"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:320
msgid ""
"You should see logged messages for the goal being accepted and the final "
"result."
msgstr ""
"Vous devriez voir des messages enregistrés pour l'objectif accepté et le "
"résultat final."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:323
msgid "2.2 Getting feedback"
msgstr "2.2 Obtenir des commentaires"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:325
msgid ""
"Our action client can send goals. Nice! But it would be great if we could "
"get some feedback about the goals we send from the action server."
msgstr ""
"Notre client d'action peut envoyer des objectifs. Bon! Mais ce serait "
"formidable si nous pouvions obtenir des commentaires sur les objectifs que "
"nous envoyons depuis le serveur d'action."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:334
msgid "Here's the callback function for feedback messages:"
msgstr "Voici la fonction de rappel pour les messages de feedback :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:340
msgid ""
"In the callback we get the feedback portion of the message and print the "
"``partial_sequence`` field to the screen."
msgstr ""
"Dans le rappel, nous obtenons la partie retour du message et affichons le "
"champ ``partial_sequence`` à l'écran."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:342
msgid ""
"We need to register the callback with the action client. This is achieved by"
" additionally passing the callback to the action client when we send a goal:"
msgstr ""
"Nous devons enregistrer le rappel auprès du client d'action. Ceci est "
"réalisé en transmettant en plus le rappel au client d'action lorsque nous "
"envoyons un objectif :"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:349
msgid ""
"We're all set. If we run our action client, you should see feedback being "
"printed to the screen."
msgstr ""
"Nous sommes prêts. Si nous exécutons notre client d'action, vous devriez "
"voir les commentaires imprimés à l'écran."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:352
msgid "Summary"
msgstr "Résumé"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:354
msgid ""
"In this tutorial, you put together a Python action server and action client "
"line by line, and configured them to exchange goals, feedback, and results."
msgstr ""
"Dans ce didacticiel, vous avez assemblé ligne par ligne un serveur d'action "
"Python et un client d'action, et les avez configurés pour échanger des "
"objectifs, des commentaires et des résultats."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:357
msgid "Related content"
msgstr "Contenu connexe"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:359
msgid ""
"There are several ways you could write an action server and client in "
"Python; check out the ``minimal_action_server`` and "
"``minimal_action_client`` packages in the `ros2/examples "
"<https://github.com/ros2/examples/tree/rolling/rclpy/actions>`_ repo."
msgstr ""
"Il existe plusieurs façons d'écrire un serveur d'action et un client en "
"Python ; consultez les packages ``minimal_action_server`` et "
"``minimal_action_client`` dans le `ros2/examples "
"<https://github.com/ros2/examples/tree/rolling/rclpy/actions>`_ repo."

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:361
msgid ""
"For more detailed information about ROS actions, please refer to the `design"
" article <http://design.ros2.org/articles/actions.html>`__."
msgstr ""
"Pour des informations plus détaillées sur les actions ROS, veuillez vous "
"référer à l'`article de conception "
"<http://design.ros2.org/articles/actions.html>`__."
